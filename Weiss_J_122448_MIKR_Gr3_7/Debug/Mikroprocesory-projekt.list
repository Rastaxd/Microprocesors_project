
Mikroprocesory-projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08004d4c  08004d4c  00005d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005034  08005034  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005034  08005034  00006034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800503c  0800503c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800503c  0800503c  0000603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005040  08005040  00006040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005044  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001494  2000005c  080050a0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014f0  080050a0  000074f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5a3  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f16  00000000  00000000  0001462f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00016548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fb  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001681f  00000000  00000000  00017c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecee  00000000  00000000  0002e422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8cb  00000000  00000000  0003d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb9db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  000cba20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000cf4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d34 	.word	0x08004d34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004d34 	.word	0x08004d34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <calculateCRC>:
 */

 #include "frame.h"

 // Funkcja obliczająca CRC
 uint16_t calculateCRC(const uint8_t *data, uint16_t length) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	807b      	strh	r3, [r7, #2]
             0xBBAF, 0xD4CC, 0x6569, 0x0A0A,   0x6940, 0x0623, 0xB786, 0xD8E5,
             0x8B0B, 0xE468, 0x55CD, 0x3AAE,   0x59E4, 0x3687, 0x8722, 0xE841,
             0x41B6, 0x2ED5, 0x9F70, 0xF013,   0x9359, 0xFC3A, 0x4D9F, 0x22FC
     };
 
     uint16_t crc = 0x0000; // Inicjalizacja CRC
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
     
     for (uint16_t i = 0; i < length; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	81bb      	strh	r3, [r7, #12]
 8000594:	e017      	b.n	80005c6 <calculateCRC+0x46>
         uint8_t index = (crc >> 8) ^ data[i]; // XOR bieżącego bajtu z górnymi 8 bitami CRC
 8000596:	89fb      	ldrh	r3, [r7, #14]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	b29b      	uxth	r3, r3
 800059c:	b2da      	uxtb	r2, r3
 800059e:	89bb      	ldrh	r3, [r7, #12]
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	440b      	add	r3, r1
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4053      	eors	r3, r2
 80005a8:	72fb      	strb	r3, [r7, #11]
         crc = (crc << 8) ^ CRC_TABLE[index];  // Aktualizacja CRC
 80005aa:	89fb      	ldrh	r3, [r7, #14]
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	7afb      	ldrb	r3, [r7, #11]
 80005b2:	490a      	ldr	r1, [pc, #40]	@ (80005dc <calculateCRC+0x5c>)
 80005b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	4053      	eors	r3, r2
 80005bc:	b21b      	sxth	r3, r3
 80005be:	81fb      	strh	r3, [r7, #14]
     for (uint16_t i = 0; i < length; i++) {
 80005c0:	89bb      	ldrh	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	81bb      	strh	r3, [r7, #12]
 80005c6:	89ba      	ldrh	r2, [r7, #12]
 80005c8:	887b      	ldrh	r3, [r7, #2]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d3e3      	bcc.n	8000596 <calculateCRC+0x16>
     }
 
     return crc;
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 }
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	08004de8 	.word	0x08004de8

080005e0 <createFrame>:
 
 // Funkcja tworząca ramkę
 uint16_t createFrame(uint8_t *buffer, const Frame *frame) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80005ec:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80005f0:	6018      	str	r0, [r3, #0]
 80005f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80005f6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80005fa:	6019      	str	r1, [r3, #0]
     uint16_t index = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 
     // Znak początku
     buffer[index++] = FRAME_START;
 8000602:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 800060c:	461a      	mov	r2, r3
 800060e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000612:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4413      	add	r3, r2
 800061a:	227e      	movs	r2, #126	@ 0x7e
 800061c:	701a      	strb	r2, [r3, #0]
 
     // Adres nadawcy (2 znaki)
     buffer[index++] = frame->sourceAddress[0];
 800061e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 8000628:	461a      	mov	r2, r3
 800062a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800062e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4413      	add	r3, r2
 8000636:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800063a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800063e:	6812      	ldr	r2, [r2, #0]
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	701a      	strb	r2, [r3, #0]
     buffer[index++] = frame->sourceAddress[1];
 8000644:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 800064e:	461a      	mov	r2, r3
 8000650:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000654:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000660:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8000664:	6812      	ldr	r2, [r2, #0]
 8000666:	7852      	ldrb	r2, [r2, #1]
 8000668:	701a      	strb	r2, [r3, #0]
 
     // Adres odbiorcy (2 znaki)
     buffer[index++] = frame->destinationAddress[0];
 800066a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800066e:	1c5a      	adds	r2, r3, #1
 8000670:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 8000674:	461a      	mov	r2, r3
 8000676:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800067a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4413      	add	r3, r2
 8000682:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000686:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	7892      	ldrb	r2, [r2, #2]
 800068e:	701a      	strb	r2, [r3, #0]
     buffer[index++] = frame->destinationAddress[1];
 8000690:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 800069a:	461a      	mov	r2, r3
 800069c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80006a0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80006ac:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	78d2      	ldrb	r2, [r2, #3]
 80006b4:	701a      	strb	r2, [r3, #0]
 
     // Długość
     buffer[index++] = frame->length;
 80006b6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 80006c0:	461a      	mov	r2, r3
 80006c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80006c6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4413      	add	r3, r2
 80006ce:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80006d2:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	7912      	ldrb	r2, [r2, #4]
 80006da:	701a      	strb	r2, [r3, #0]
 
     // Dodaj dane (ASCII)
     for (uint16_t i = 0; i < frame->length; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
 80006e2:	e063      	b.n	80007ac <createFrame+0x1cc>
         if (frame->data[i] == FRAME_START || 
 80006e4:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 80006e8:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80006ec:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80006f0:	6812      	ldr	r2, [r2, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	795b      	ldrb	r3, [r3, #5]
 80006f6:	2b7e      	cmp	r3, #126	@ 0x7e
 80006f8:	d015      	beq.n	8000726 <createFrame+0x146>
             frame->data[i] == FRAME_END || 
 80006fa:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 80006fe:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000702:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8000706:	6812      	ldr	r2, [r2, #0]
 8000708:	4413      	add	r3, r2
 800070a:	795b      	ldrb	r3, [r3, #5]
         if (frame->data[i] == FRAME_START || 
 800070c:	2b7c      	cmp	r3, #124	@ 0x7c
 800070e:	d00a      	beq.n	8000726 <createFrame+0x146>
             frame->data[i] == ESCAPE_CHAR) {
 8000710:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 8000714:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000718:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	4413      	add	r3, r2
 8000720:	795b      	ldrb	r3, [r3, #5]
             frame->data[i] == FRAME_END || 
 8000722:	2b7d      	cmp	r3, #125	@ 0x7d
 8000724:	d127      	bne.n	8000776 <createFrame+0x196>
             buffer[index++] = ESCAPE_CHAR;
 8000726:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 8000730:	461a      	mov	r2, r3
 8000732:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000736:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4413      	add	r3, r2
 800073e:	227d      	movs	r2, #125	@ 0x7d
 8000740:	701a      	strb	r2, [r3, #0]
             buffer[index++] = frame->data[i] ^ 0x20;  // Byte stuffing
 8000742:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 8000746:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800074a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	4413      	add	r3, r2
 8000752:	795a      	ldrb	r2, [r3, #5]
 8000754:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000758:	1c59      	adds	r1, r3, #1
 800075a:	f8a7 120e 	strh.w	r1, [r7, #526]	@ 0x20e
 800075e:	4619      	mov	r1, r3
 8000760:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000764:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	440b      	add	r3, r1
 800076c:	f082 0220 	eor.w	r2, r2, #32
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e015      	b.n	80007a2 <createFrame+0x1c2>
         } else {
             buffer[index++] = frame->data[i];
 8000776:	f8b7 220c 	ldrh.w	r2, [r7, #524]	@ 0x20c
 800077a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800077e:	1c59      	adds	r1, r3, #1
 8000780:	f8a7 120e 	strh.w	r1, [r7, #526]	@ 0x20e
 8000784:	4619      	mov	r1, r3
 8000786:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800078a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	440b      	add	r3, r1
 8000792:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8000796:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 800079a:	6809      	ldr	r1, [r1, #0]
 800079c:	440a      	add	r2, r1
 800079e:	7952      	ldrb	r2, [r2, #5]
 80007a0:	701a      	strb	r2, [r3, #0]
     for (uint16_t i = 0; i < frame->length; i++) {
 80007a2:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 80007a6:	3301      	adds	r3, #1
 80007a8:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
 80007ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80007b0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	461a      	mov	r2, r3
 80007ba:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 80007be:	4293      	cmp	r3, r2
 80007c0:	d390      	bcc.n	80006e4 <createFrame+0x104>
         }
     }
 
     // Przygotuj dane do CRC (od nadawcy do końca danych)
     uint8_t crcData[MAX_FRAME_WITHOUT_STUFFING];
     uint16_t crcLen = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 
     // Kopiuj dane do CRC od nadawcy
     crcData[crcLen++] = frame->sourceAddress[0];      // Nadawca [0]
 80007c8:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	f8a7 220a 	strh.w	r2, [r7, #522]	@ 0x20a
 80007d2:	461a      	mov	r2, r3
 80007d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80007d8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	7819      	ldrb	r1, [r3, #0]
 80007e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80007e4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80007e8:	5499      	strb	r1, [r3, r2]
     crcData[crcLen++] = frame->sourceAddress[1];      // Nadawca [1]
 80007ea:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	f8a7 220a 	strh.w	r2, [r7, #522]	@ 0x20a
 80007f4:	461a      	mov	r2, r3
 80007f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80007fa:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	7859      	ldrb	r1, [r3, #1]
 8000802:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000806:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800080a:	5499      	strb	r1, [r3, r2]
     crcData[crcLen++] = frame->destinationAddress[0]; // Odbiorca [0]
 800080c:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	f8a7 220a 	strh.w	r2, [r7, #522]	@ 0x20a
 8000816:	461a      	mov	r2, r3
 8000818:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800081c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	7899      	ldrb	r1, [r3, #2]
 8000824:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000828:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800082c:	5499      	strb	r1, [r3, r2]
     crcData[crcLen++] = frame->destinationAddress[1]; // Odbiorca [1]
 800082e:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	f8a7 220a 	strh.w	r2, [r7, #522]	@ 0x20a
 8000838:	461a      	mov	r2, r3
 800083a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800083e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	78d9      	ldrb	r1, [r3, #3]
 8000846:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800084a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800084e:	5499      	strb	r1, [r3, r2]
     crcData[crcLen++] = frame->length;               // Długość
 8000850:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	f8a7 220a 	strh.w	r2, [r7, #522]	@ 0x20a
 800085a:	461a      	mov	r2, r3
 800085c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000860:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	7919      	ldrb	r1, [r3, #4]
 8000868:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800086c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000870:	5499      	strb	r1, [r3, r2]
     memcpy(crcData + crcLen, frame->data, frame->length); // Dane
 8000872:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000876:	f107 0208 	add.w	r2, r7, #8
 800087a:	18d0      	adds	r0, r2, r3
 800087c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000880:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1d59      	adds	r1, r3, #5
 8000888:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800088c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	461a      	mov	r2, r3
 8000896:	f003 fe01 	bl	800449c <memcpy>
     crcLen += frame->length;
 800089a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800089e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	461a      	mov	r2, r3
 80008a8:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 80008ac:	4413      	add	r3, r2
 80008ae:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 
     uint16_t crc = calculateCRC(crcData, crcLen);
 80008b2:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe5f 	bl	8000580 <calculateCRC>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208
 
     // Dodaj CRC jako surowe bajty w formacie big endian
     buffer[index++] = (crc >> 8) & 0xFF;  // Starszy bajt
 80008c8:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80008d4:	1c59      	adds	r1, r3, #1
 80008d6:	f8a7 120e 	strh.w	r1, [r7, #526]	@ 0x20e
 80008da:	4619      	mov	r1, r3
 80008dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80008e0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	440b      	add	r3, r1
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	701a      	strb	r2, [r3, #0]
     buffer[index++] = crc & 0xFF;         // Młodszy bajt
 80008ec:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 80008f6:	461a      	mov	r2, r3
 80008f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80008fc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	f8b7 2208 	ldrh.w	r2, [r7, #520]	@ 0x208
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
 
     // Dodaj FRAME_END (hex)
     buffer[index++] = FRAME_END; // 0x7C
 800090c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	f8a7 220e 	strh.w	r2, [r7, #526]	@ 0x20e
 8000916:	461a      	mov	r2, r3
 8000918:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800091c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	227c      	movs	r2, #124	@ 0x7c
 8000926:	701a      	strb	r2, [r3, #0]
 
     return index;
 8000928:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 }
 800092c:	4618      	mov	r0, r3
 800092e:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <decodeFrame>:
 
 // Funkcja dekodująca ramkę
 int decodeFrame(FrameState *frameState, uint16_t length, Frame *frame) {
 8000938:	b580      	push	{r7, lr}
 800093a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800093e:	af00      	add	r7, sp, #0
 8000940:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000944:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000948:	6018      	str	r0, [r3, #0]
 800094a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800094e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000958:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800095c:	460a      	mov	r2, r1
 800095e:	801a      	strh	r2, [r3, #0]
     USART_fsend("Decoding frame, length: %d\r\n", length);
 8000960:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000964:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	489c      	ldr	r0, [pc, #624]	@ (8000be0 <decodeFrame+0x2a8>)
 800096e:	f000 fa2d 	bl	8000dcc <USART_fsend>
     // Sprawdź minimalną długość przed odczytem
     if (length < MIN_FRAME_LEN) return 0;  // Przenieść na początek funkcji
 8000972:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000976:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	2b08      	cmp	r3, #8
 800097e:	d801      	bhi.n	8000984 <decodeFrame+0x4c>
 8000980:	2300      	movs	r3, #0
 8000982:	e1da      	b.n	8000d3a <decodeFrame+0x402>
     
     // Sprawdź znak początku
     if (frameState->bx[0] != FRAME_START) return 0;
 8000984:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000988:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	789b      	ldrb	r3, [r3, #2]
 8000990:	2b7e      	cmp	r3, #126	@ 0x7e
 8000992:	d001      	beq.n	8000998 <decodeFrame+0x60>
 8000994:	2300      	movs	r3, #0
 8000996:	e1d0      	b.n	8000d3a <decodeFrame+0x402>
     
     // Odczyt adresów
     frame->sourceAddress[0] = frameState->bx[1];
 8000998:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800099c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	78da      	ldrb	r2, [r3, #3]
 80009a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	701a      	strb	r2, [r3, #0]
     frame->sourceAddress[1] = frameState->bx[2];
 80009b0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009b4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	791a      	ldrb	r2, [r3, #4]
 80009bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009c0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	705a      	strb	r2, [r3, #1]
     frame->destinationAddress[0] = frameState->bx[3];
 80009c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009cc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	795a      	ldrb	r2, [r3, #5]
 80009d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	709a      	strb	r2, [r3, #2]
     frame->destinationAddress[1] = frameState->bx[4];
 80009e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009e4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	799a      	ldrb	r2, [r3, #6]
 80009ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009f0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	70da      	strb	r2, [r3, #3]
     frame->length = frameState->bx[5];
 80009f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80009fc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	79da      	ldrb	r2, [r3, #7]
 8000a04:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000a08:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	711a      	strb	r2, [r3, #4]
     
     // Sprawdź długość
     if (frame->length > MAX_DATA_LEN || frame->length > (length - MIN_FRAME_LEN)) {
 8000a10:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000a14:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	3b08      	subs	r3, #8
 8000a1c:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8000a20:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	7912      	ldrb	r2, [r2, #4]
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	dc01      	bgt.n	8000a30 <decodeFrame+0xf8>
         return 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e184      	b.n	8000d3a <decodeFrame+0x402>
     }
     
     uint16_t dataIndex = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
     
     // Kopiowanie danych z dekodowaniem byte stuffingu - ZŁY POCZĄTKOWY INDEKS!
     for (uint16_t i = 6; i < length - 3 && dataIndex < frame->length; i++) {
 8000a36:	2306      	movs	r3, #6
 8000a38:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
 8000a3c:	e06b      	b.n	8000b16 <decodeFrame+0x1de>
         if (frameState->bx[i] == ESCAPE_CHAR) {
 8000a3e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8000a42:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8000a46:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	2b7d      	cmp	r3, #125	@ 0x7d
 8000a52:	d145      	bne.n	8000ae0 <decodeFrame+0x1a8>
             switch (frameState->bx[++i]) {  // Najpierw inkrementuj i, potem użyj
 8000a54:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
 8000a5e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8000a62:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8000a66:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	789b      	ldrb	r3, [r3, #2]
 8000a70:	2b5e      	cmp	r3, #94	@ 0x5e
 8000a72:	d006      	beq.n	8000a82 <decodeFrame+0x14a>
 8000a74:	2b5e      	cmp	r3, #94	@ 0x5e
 8000a76:	dc31      	bgt.n	8000adc <decodeFrame+0x1a4>
 8000a78:	2b5c      	cmp	r3, #92	@ 0x5c
 8000a7a:	d011      	beq.n	8000aa0 <decodeFrame+0x168>
 8000a7c:	2b5d      	cmp	r3, #93	@ 0x5d
 8000a7e:	d01e      	beq.n	8000abe <decodeFrame+0x186>
 8000a80:	e02c      	b.n	8000adc <decodeFrame+0x1a4>
                 case FRAME_START_STUFF:
                     frame->data[dataIndex++] = FRAME_START;
 8000a82:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000a92:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	227e      	movs	r2, #126	@ 0x7e
 8000a9c:	715a      	strb	r2, [r3, #5]
                     break;
 8000a9e:	e035      	b.n	8000b0c <decodeFrame+0x1d4>
                 case FRAME_END_STUFF:
                     frame->data[dataIndex++] = FRAME_END;
 8000aa0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000ab0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	227c      	movs	r2, #124	@ 0x7c
 8000aba:	715a      	strb	r2, [r3, #5]
                     break;
 8000abc:	e026      	b.n	8000b0c <decodeFrame+0x1d4>
                 case ESCAPE_CHAR_STUFF:
                     frame->data[dataIndex++] = ESCAPE_CHAR;
 8000abe:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000ace:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	227d      	movs	r2, #125	@ 0x7d
 8000ad8:	715a      	strb	r2, [r3, #5]
                     break;
 8000ada:	e017      	b.n	8000b0c <decodeFrame+0x1d4>
                 default:
                     return 0; // Błędna sekwencja escape
 8000adc:	2300      	movs	r3, #0
 8000ade:	e12c      	b.n	8000d3a <decodeFrame+0x402>
             }
         } else {
             frame->data[dataIndex++] = frameState->bx[i];
 8000ae0:	f8b7 2214 	ldrh.w	r2, [r7, #532]	@ 0x214
 8000ae4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8000ae8:	1c59      	adds	r1, r3, #1
 8000aea:	f8a7 1216 	strh.w	r1, [r7, #534]	@ 0x216
 8000aee:	4619      	mov	r1, r3
 8000af0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000af4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	789a      	ldrb	r2, [r3, #2]
 8000afe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000b02:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	440b      	add	r3, r1
 8000b0a:	715a      	strb	r2, [r3, #5]
     for (uint16_t i = 6; i < length - 3 && dataIndex < frame->length; i++) {
 8000b0c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8000b10:	3301      	adds	r3, #1
 8000b12:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
 8000b16:	f8b7 2214 	ldrh.w	r2, [r7, #532]	@ 0x214
 8000b1a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000b1e:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	429a      	cmp	r2, r3
 8000b28:	da0b      	bge.n	8000b42 <decodeFrame+0x20a>
 8000b2a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000b2e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	461a      	mov	r2, r3
 8000b38:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	f4ff af7e 	bcc.w	8000a3e <decodeFrame+0x106>
         }
     }
     
     // Sprawdź czy odczytano właściwą ilość danych
     if (dataIndex != frame->length) {
 8000b42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000b46:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d001      	beq.n	8000b5c <decodeFrame+0x224>
         return 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e0ee      	b.n	8000d3a <decodeFrame+0x402>
     }
     
     // Odczyt CRC (2 bajty, big endian)
     if (length < MIN_FRAME_LEN) return 0;  // Minimalna długość ramki
 8000b5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000b60:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d801      	bhi.n	8000b6e <decodeFrame+0x236>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e0e5      	b.n	8000d3a <decodeFrame+0x402>
     frame->crc = (frameState->bx[length - 3] << 8) | frameState->bx[length - 2];
 8000b6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000b72:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8000b7e:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000b90:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	3b02      	subs	r3, #2
 8000b98:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8000b9c:	f5a1 7103 	sub.w	r1, r1, #524	@ 0x20c
 8000ba0:	6809      	ldr	r1, [r1, #0]
 8000ba2:	440b      	add	r3, r1
 8000ba4:	789b      	ldrb	r3, [r3, #2]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000bb2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
     if (frameState->bx[length - 1] != FRAME_END) return 0;  // Sprawdź końcowy znak
 8000bbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000bc0:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8000bcc:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	2b7c      	cmp	r3, #124	@ 0x7c
 8000bd8:	d004      	beq.n	8000be4 <decodeFrame+0x2ac>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e0ad      	b.n	8000d3a <decodeFrame+0x402>
 8000bde:	bf00      	nop
 8000be0:	08004d4c 	.word	0x08004d4c
     
     // Weryfikacja CRC
     uint8_t crcData[MAX_FRAME_WITHOUT_STUFFING];
     uint16_t crcLen = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 
     // Kopiuj dane do CRC od nadawcy
     crcData[crcLen++] = frameState->bx[1];  // Nadawca [0]
 8000bea:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	f8a7 2212 	strh.w	r2, [r7, #530]	@ 0x212
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000bfa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	78d9      	ldrb	r1, [r3, #3]
 8000c02:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c06:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c0a:	5499      	strb	r1, [r3, r2]
     crcData[crcLen++] = frameState->bx[2];  // Nadawca [1]
 8000c0c:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	f8a7 2212 	strh.w	r2, [r7, #530]	@ 0x212
 8000c16:	461a      	mov	r2, r3
 8000c18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c1c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	7919      	ldrb	r1, [r3, #4]
 8000c24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c28:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c2c:	5499      	strb	r1, [r3, r2]
     crcData[crcLen++] = frameState->bx[3];  // Odbiorca [0]
 8000c2e:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	f8a7 2212 	strh.w	r2, [r7, #530]	@ 0x212
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c3e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	7959      	ldrb	r1, [r3, #5]
 8000c46:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c4a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c4e:	5499      	strb	r1, [r3, r2]
     crcData[crcLen++] = frameState->bx[4];  // Odbiorca [1]
 8000c50:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	f8a7 2212 	strh.w	r2, [r7, #530]	@ 0x212
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c60:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	7999      	ldrb	r1, [r3, #6]
 8000c68:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c6c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c70:	5499      	strb	r1, [r3, r2]
     crcData[crcLen++] = frameState->bx[5];  // Długość
 8000c72:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	f8a7 2212 	strh.w	r2, [r7, #530]	@ 0x212
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c82:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	79d9      	ldrb	r1, [r3, #7]
 8000c8a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000c8e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000c92:	5499      	strb	r1, [r3, r2]
     memcpy(crcData + crcLen, frame->data, frame->length); // Dane
 8000c94:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8000c98:	f107 0210 	add.w	r2, r7, #16
 8000c9c:	18d0      	adds	r0, r2, r3
 8000c9e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000ca2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1d59      	adds	r1, r3, #5
 8000caa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000cae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f003 fbf0 	bl	800449c <memcpy>
     crcLen += frame->length;
 8000cbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000cc0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	791b      	ldrb	r3, [r3, #4]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f8b7 3212 	ldrh.w	r3, [r7, #530]	@ 0x212
 8000cce:	4413      	add	r3, r2
 8000cd0:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 
     uint16_t calculatedCRC = calculateCRC(crcData, crcLen);
 8000cd4:	f8b7 2212 	ldrh.w	r2, [r7, #530]	@ 0x212
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fc4e 	bl	8000580 <calculateCRC>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
     USART_fsend("CRC: calculated=0x%04X received=0x%04X\r\n", calculatedCRC, frame->crc);
 8000cea:	f8b7 1210 	ldrh.w	r1, [r7, #528]	@ 0x210
 8000cee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000cf2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <decodeFrame+0x40c>)
 8000d00:	f000 f864 	bl	8000dcc <USART_fsend>
     if (calculatedCRC != frame->crc) {
 8000d04:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000d08:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8000d12:	f8b7 2210 	ldrh.w	r2, [r7, #528]	@ 0x210
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d00e      	beq.n	8000d38 <decodeFrame+0x400>
         USART_fsend("CRC Error: calc=0x%04X recv=0x%04X\r\n", calculatedCRC, frame->crc);
 8000d1a:	f8b7 1210 	ldrh.w	r1, [r7, #528]	@ 0x210
 8000d1e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8000d22:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <decodeFrame+0x410>)
 8000d30:	f000 f84c 	bl	8000dcc <USART_fsend>
         return 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e000      	b.n	8000d3a <decodeFrame+0x402>
     }
     
     return 1; // Sukces
 8000d38:	2301      	movs	r3, #1
 }
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	08004d6c 	.word	0x08004d6c
 8000d48:	08004d98 	.word	0x08004d98

08000d4c <USART_kbhit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Weryfikacja, czy w buforze są nowe dane
uint8_t USART_kbhit(){
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
	if(USART_RX_Empty==USART_RX_Busy){
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <USART_kbhit+0x20>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <USART_kbhit+0x24>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d101      	bne.n	8000d60 <USART_kbhit+0x14>
		return 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e000      	b.n	8000d62 <USART_kbhit+0x16>
	}else{
		return 1;
 8000d60:	2301      	movs	r3, #1
	}
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20001110 	.word	0x20001110
 8000d70:	20001114 	.word	0x20001114

08000d74 <USART_getchar>:

// Funkcja pobiera jeden znak z bufora odbiorczego
int16_t USART_getchar(){
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
int16_t tmp;
	if(USART_RX_Empty!=USART_RX_Busy){
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <USART_getchar+0x4c>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <USART_getchar+0x50>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d014      	beq.n	8000db0 <USART_getchar+0x3c>
		 tmp=USART_RxBuf[USART_RX_Busy];// Pobierz dane
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <USART_getchar+0x50>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <USART_getchar+0x54>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	80fb      	strh	r3, [r7, #6]
		 USART_RX_Busy++;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <USART_getchar+0x50>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <USART_getchar+0x50>)
 8000d98:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Busy >= USART_RXBUF_LEN)USART_RX_Busy=0; // Zawijanie wskaźnika
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <USART_getchar+0x50>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000da2:	db02      	blt.n	8000daa <USART_getchar+0x36>
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <USART_getchar+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
		 return tmp; // Zwróc odebrany bajt
 8000daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dae:	e001      	b.n	8000db4 <USART_getchar+0x40>
	}else return -1; // Brak danych
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	20001110 	.word	0x20001110
 8000dc4:	20001114 	.word	0x20001114
 8000dc8:	20000d08 	.word	0x20000d08

08000dcc <USART_fsend>:



void USART_fsend(char* format,...){
 8000dcc:	b40f      	push	{r0, r1, r2, r3}
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b0a4      	sub	sp, #144	@ 0x90
 8000dd2:	af00      	add	r7, sp, #0
char tmp_rs[128];
int i;
__IO int idx;
va_list arglist;

  va_start(arglist,format);
 8000dd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dd8:	607b      	str	r3, [r7, #4]
  vsprintf(tmp_rs,format,arglist); // Formatowanie danych do bufora
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fb0b 	bl	8004400 <vsiprintf>
  va_end(arglist);

  idx=USART_TX_Empty;
 8000dea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea8 <USART_fsend+0xdc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	60bb      	str	r3, [r7, #8]

  for(i=0;i<strlen(tmp_rs);i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000df6:	e016      	b.n	8000e26 <USART_fsend+0x5a>
	  USART_TxBuf[idx]=tmp_rs[i]; // Dane do bufora nadawczego
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	f107 010c 	add.w	r1, r7, #12
 8000dfe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000e02:	440a      	add	r2, r1
 8000e04:	7811      	ldrb	r1, [r2, #0]
 8000e06:	4a29      	ldr	r2, [pc, #164]	@ (8000eac <USART_fsend+0xe0>)
 8000e08:	54d1      	strb	r1, [r2, r3]
	  idx++;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
	  if(idx >= USART_TXBUF_LEN)idx=0; // Zawijanie wskaznika
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000e16:	db01      	blt.n	8000e1c <USART_fsend+0x50>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  for(i=0;i<strlen(tmp_rs);i++){
 8000e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e20:	3301      	adds	r3, #1
 8000e22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff f9d8 	bl	80001e0 <strlen>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d8de      	bhi.n	8000df8 <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3a:	b672      	cpsid	i
}
 8000e3c:	bf00      	nop
  }
  __disable_irq(); // Wylaczenie przerwan
  if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <USART_fsend+0xdc>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <USART_fsend+0xe4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d122      	bne.n	8000e90 <USART_fsend+0xc4>
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <USART_fsend+0xe8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e54:	2b80      	cmp	r3, #128	@ 0x80
 8000e56:	d11b      	bne.n	8000e90 <USART_fsend+0xc4>
	  // Rozpocznij przesylanie jesli bufor pusty i transmisja wolna
	  USART_TX_Empty=idx;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ea8 <USART_fsend+0xdc>)
 8000e5c:	6013      	str	r3, [r2, #0]
	  uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 8000e5e:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <USART_fsend+0xe4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <USART_fsend+0xe0>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	70fb      	strb	r3, [r7, #3]
	  USART_TX_Busy++;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <USART_fsend+0xe4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a10      	ldr	r2, [pc, #64]	@ (8000eb0 <USART_fsend+0xe4>)
 8000e70:	6013      	str	r3, [r2, #0]
	  if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <USART_fsend+0xe4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000e7a:	db02      	blt.n	8000e82 <USART_fsend+0xb6>
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <USART_fsend+0xe4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit_IT(&huart2, &tmp, 1); // Wysylanie z przerwaniem
 8000e82:	1cfb      	adds	r3, r7, #3
 8000e84:	2201      	movs	r2, #1
 8000e86:	4619      	mov	r1, r3
 8000e88:	480a      	ldr	r0, [pc, #40]	@ (8000eb4 <USART_fsend+0xe8>)
 8000e8a:	f002 fafc 	bl	8003486 <HAL_UART_Transmit_IT>
  if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000e8e:	e002      	b.n	8000e96 <USART_fsend+0xca>
  }else{
	  USART_TX_Empty=idx; // Aktualizacja wskaznika
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <USART_fsend+0xdc>)
 8000e94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e96:	b662      	cpsie	i
}
 8000e98:	bf00      	nop
  }
  __enable_irq(); // Włączenie przerwań
}//fsend
 8000e9a:	bf00      	nop
 8000e9c:	3790      	adds	r7, #144	@ 0x90
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr
 8000ea8:	20001108 	.word	0x20001108
 8000eac:	20000108 	.word	0x20000108
 8000eb0:	2000110c 	.word	0x2000110c
 8000eb4:	200000c0 	.word	0x200000c0

08000eb8 <HAL_UART_TxCpltCallback>:

// Callback na Wyslanie
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(huart==&huart2){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a13      	ldr	r2, [pc, #76]	@ (8000f10 <HAL_UART_TxCpltCallback+0x58>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d11e      	bne.n	8000f06 <HAL_UART_TxCpltCallback+0x4e>
    if(USART_TX_Empty!=USART_TX_Busy){
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_UART_TxCpltCallback+0x5c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_UART_TxCpltCallback+0x60>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d018      	beq.n	8000f06 <HAL_UART_TxCpltCallback+0x4e>
      uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_UART_TxCpltCallback+0x60>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <HAL_UART_TxCpltCallback+0x64>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	73fb      	strb	r3, [r7, #15]
      USART_TX_Busy++;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_UART_TxCpltCallback+0x60>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <HAL_UART_TxCpltCallback+0x60>)
 8000ee6:	6013      	str	r3, [r2, #0]
      if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <HAL_UART_TxCpltCallback+0x60>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000ef0:	db02      	blt.n	8000ef8 <HAL_UART_TxCpltCallback+0x40>
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_UART_TxCpltCallback+0x60>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <HAL_UART_TxCpltCallback+0x58>)
 8000f02:	f002 fac0 	bl	8003486 <HAL_UART_Transmit_IT>
    }
  }
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000c0 	.word	0x200000c0
 8000f14:	20001108 	.word	0x20001108
 8000f18:	2000110c 	.word	0x2000110c
 8000f1c:	20000108 	.word	0x20000108

08000f20 <sendResponse>:

void sendResponse(const char *message) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	f5ad 6da2 	sub.w	sp, sp, #1296	@ 0x510
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f2c:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8000f30:	6018      	str	r0, [r3, #0]
    if (!message || strlen(message) > MAX_DATA_LEN) {  // Dodanie sprawdzenia NULL
 8000f32:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f36:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d054      	beq.n	8000fea <sendResponse+0xca>
 8000f40:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f44:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f7ff f949 	bl	80001e0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2bff      	cmp	r3, #255	@ 0xff
 8000f52:	d84a      	bhi.n	8000fea <sendResponse+0xca>
        return;
    }
    Frame responseFrame;
    // Inicjalizacja ramki odpowiedzi
    responseFrame.sourceAddress[0] = 'S';
 8000f54:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f5c:	2253      	movs	r2, #83	@ 0x53
 8000f5e:	701a      	strb	r2, [r3, #0]
    responseFrame.sourceAddress[1] = 'T';
 8000f60:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f68:	2254      	movs	r2, #84	@ 0x54
 8000f6a:	705a      	strb	r2, [r3, #1]
    responseFrame.destinationAddress[0] = 'P';
 8000f6c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f74:	2250      	movs	r2, #80	@ 0x50
 8000f76:	709a      	strb	r2, [r3, #2]
    responseFrame.destinationAddress[1] = 'C';
 8000f78:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f80:	2243      	movs	r2, #67	@ 0x43
 8000f82:	70da      	strb	r2, [r3, #3]
    responseFrame.length = strlen(message);
 8000f84:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f88:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	f7ff f927 	bl	80001e0 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f9e:	711a      	strb	r2, [r3, #4]
    memcpy(responseFrame.data, message, responseFrame.length);
 8000fa0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	4619      	mov	r1, r3
 8000fac:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000fb0:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8000fb4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000fb8:	1d50      	adds	r0, r2, #5
 8000fba:	460a      	mov	r2, r1
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	f003 fa6d 	bl	800449c <memcpy>

    // Użyj USART_fsend zamiast HAL_UART_Transmit
    uint8_t buffer[MAX_FRAME_BUFFER_SIZE];
    uint16_t frameLength = createFrame(buffer, &responseFrame);
 8000fc2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fb07 	bl	80005e0 <createFrame>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f8a7 350e 	strh.w	r3, [r7, #1294]	@ 0x50e
    USART_fsend("%.*s", frameLength, buffer);
 8000fd8:	f8b7 350e 	ldrh.w	r3, [r7, #1294]	@ 0x50e
 8000fdc:	f107 0208 	add.w	r2, r7, #8
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <sendResponse+0xd4>)
 8000fe4:	f7ff fef2 	bl	8000dcc <USART_fsend>
 8000fe8:	e000      	b.n	8000fec <sendResponse+0xcc>
        return;
 8000fea:	bf00      	nop
}
 8000fec:	f507 67a2 	add.w	r7, r7, #1296	@ 0x510
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	08004dc0 	.word	0x08004dc0

08000ff8 <processCommand>:

void processCommand(Frame *frame) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001004:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001008:	6018      	str	r0, [r3, #0]
    if (!frame) {  // Dodanie sprawdzenia NULL
 800100a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800100e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80bc 	beq.w	8001192 <processCommand+0x19a>
        return;
    }

    // Sprawdź poprawność adresów
    if (memcmp(&frame->sourceAddress, "PC", 2) != 0 || 
 800101a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800101e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2202      	movs	r2, #2
 8001026:	495d      	ldr	r1, [pc, #372]	@ (800119c <processCommand+0x1a4>)
 8001028:	4618      	mov	r0, r3
 800102a:	f003 f9f3 	bl	8004414 <memcmp>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10d      	bne.n	8001050 <processCommand+0x58>
        memcmp(&frame->destinationAddress, "ST", 2) != 0) {
 8001034:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001038:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3302      	adds	r3, #2
 8001040:	2202      	movs	r2, #2
 8001042:	4957      	ldr	r1, [pc, #348]	@ (80011a0 <processCommand+0x1a8>)
 8001044:	4618      	mov	r0, r3
 8001046:	f003 f9e5 	bl	8004414 <memcmp>
 800104a:	4603      	mov	r3, r0
    if (memcmp(&frame->sourceAddress, "PC", 2) != 0 || 
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <processCommand+0x60>
        sendResponse("FAL");
 8001050:	4854      	ldr	r0, [pc, #336]	@ (80011a4 <processCommand+0x1ac>)
 8001052:	f7ff ff65 	bl	8000f20 <sendResponse>
        return;
 8001056:	e09d      	b.n	8001194 <processCommand+0x19c>
    }

    if (frame->length < 3) {
 8001058:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800105c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d803      	bhi.n	8001070 <processCommand+0x78>
        sendResponse("FAL");
 8001068:	484e      	ldr	r0, [pc, #312]	@ (80011a4 <processCommand+0x1ac>)
 800106a:	f7ff ff59 	bl	8000f20 <sendResponse>
        return;
 800106e:	e091      	b.n	8001194 <processCommand+0x19c>
    }

    if (memcmp(frame->data, "GET", 3) == 0) {
 8001070:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001074:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3305      	adds	r3, #5
 800107c:	2203      	movs	r2, #3
 800107e:	494a      	ldr	r1, [pc, #296]	@ (80011a8 <processCommand+0x1b0>)
 8001080:	4618      	mov	r0, r3
 8001082:	f003 f9c7 	bl	8004414 <memcmp>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d169      	bne.n	8001160 <processCommand+0x168>
        uint16_t requestedCount = ascii_to_int(&frame->data[3]);
 800108c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001090:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3308      	adds	r3, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f9bd 	bl	8001418 <ascii_to_int>
 800109e:	4603      	mov	r3, r0
 80010a0:	f8a7 3316 	strh.w	r3, [r7, #790]	@ 0x316
        
        if (requestedCount == 0 || requestedCount > MAX_DATA_LEN) {
 80010a4:	f8b7 3316 	ldrh.w	r3, [r7, #790]	@ 0x316
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <processCommand+0xbc>
 80010ac:	f8b7 3316 	ldrh.w	r3, [r7, #790]	@ 0x316
 80010b0:	2bff      	cmp	r3, #255	@ 0xff
 80010b2:	d903      	bls.n	80010bc <processCommand+0xc4>
            sendResponse("TMC");
 80010b4:	483d      	ldr	r0, [pc, #244]	@ (80011ac <processCommand+0x1b4>)
 80010b6:	f7ff ff33 	bl	8000f20 <sendResponse>
            return;
 80010ba:	e06b      	b.n	8001194 <processCommand+0x19c>
        }
        if (requestedCount > sensorIndex) {
 80010bc:	4b3c      	ldr	r3, [pc, #240]	@ (80011b0 <processCommand+0x1b8>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f8b7 2316 	ldrh.w	r2, [r7, #790]	@ 0x316
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d903      	bls.n	80010d2 <processCommand+0xda>
            sendResponse("TMC"); // Za dużo danych
 80010ca:	4838      	ldr	r0, [pc, #224]	@ (80011ac <processCommand+0x1b4>)
 80010cc:	f7ff ff28 	bl	8000f20 <sendResponse>
 80010d0:	e060      	b.n	8001194 <processCommand+0x19c>
        } else {
            // Dodać sprawdzenie przed kopiowaniem danych:
            if (requestedCount > MAX_DATA_LEN) {
 80010d2:	f8b7 3316 	ldrh.w	r3, [r7, #790]	@ 0x316
 80010d6:	2bff      	cmp	r3, #255	@ 0xff
 80010d8:	d903      	bls.n	80010e2 <processCommand+0xea>
                sendResponse("TMC");
 80010da:	4834      	ldr	r0, [pc, #208]	@ (80011ac <processCommand+0x1b4>)
 80010dc:	f7ff ff20 	bl	8000f20 <sendResponse>
 80010e0:	e058      	b.n	8001194 <processCommand+0x19c>
                return;
            }
            Frame dataFrame;
            // Ustawiamy ST jako nadawcę odpowiedzi
            memcpy(&dataFrame.sourceAddress, "ST", 2);
 80010e2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80010e6:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80010ea:	f245 4253 	movw	r2, #21587	@ 0x5453
 80010ee:	801a      	strh	r2, [r3, #0]
            // Ustawiamy PC jako odbiorcę odpowiedzi
            memcpy(&dataFrame.destinationAddress, "PC", 2);
 80010f0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80010f4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80010f8:	f244 3250 	movw	r2, #17232	@ 0x4350
 80010fc:	805a      	strh	r2, [r3, #2]
            dataFrame.length = requestedCount;
 80010fe:	f8b7 3316 	ldrh.w	r3, [r7, #790]	@ 0x316
 8001102:	b2da      	uxtb	r2, r3
 8001104:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001108:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 800110c:	711a      	strb	r2, [r3, #4]
            memcpy(dataFrame.data, &sensorBuffer[sensorIndex - requestedCount], requestedCount);
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <processCommand+0x1b8>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	f8b7 3316 	ldrh.w	r3, [r7, #790]	@ 0x316
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	4a25      	ldr	r2, [pc, #148]	@ (80011b4 <processCommand+0x1bc>)
 800111e:	1899      	adds	r1, r3, r2
 8001120:	f8b7 2316 	ldrh.w	r2, [r7, #790]	@ 0x316
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	3305      	adds	r3, #5
 800112a:	4618      	mov	r0, r3
 800112c:	f003 f9b6 	bl	800449c <memcpy>

            uint8_t buffer[512];
            uint16_t frameLength = createFrame(buffer, &dataFrame);
 8001130:	f107 020c 	add.w	r2, r7, #12
 8001134:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fa50 	bl	80005e0 <createFrame>
 8001140:	4603      	mov	r3, r0
 8001142:	f8a7 3314 	strh.w	r3, [r7, #788]	@ 0x314
            HAL_UART_Transmit(&huart2, buffer, frameLength, HAL_MAX_DELAY);
 8001146:	f8b7 2314 	ldrh.w	r2, [r7, #788]	@ 0x314
 800114a:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	4819      	ldr	r0, [pc, #100]	@ (80011b8 <processCommand+0x1c0>)
 8001154:	f002 f90c 	bl	8003370 <HAL_UART_Transmit>

            sendResponse("CPL"); // Completed
 8001158:	4818      	ldr	r0, [pc, #96]	@ (80011bc <processCommand+0x1c4>)
 800115a:	f7ff fee1 	bl	8000f20 <sendResponse>
 800115e:	e019      	b.n	8001194 <processCommand+0x19c>
        }
    } else if (memcmp(frame->data, "LIVEG", 5) == 0) {
 8001160:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001164:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3305      	adds	r3, #5
 800116c:	2205      	movs	r2, #5
 800116e:	4914      	ldr	r1, [pc, #80]	@ (80011c0 <processCommand+0x1c8>)
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f94f 	bl	8004414 <memcmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <processCommand+0x192>
        liveModeEnabled = 1;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <processCommand+0x1cc>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
        sendResponse("CPL"); // Completed
 8001182:	480e      	ldr	r0, [pc, #56]	@ (80011bc <processCommand+0x1c4>)
 8001184:	f7ff fecc 	bl	8000f20 <sendResponse>
 8001188:	e004      	b.n	8001194 <processCommand+0x19c>
    } else {
        sendResponse("FAL"); // Nieprawidłowa komenda
 800118a:	4806      	ldr	r0, [pc, #24]	@ (80011a4 <processCommand+0x1ac>)
 800118c:	f7ff fec8 	bl	8000f20 <sendResponse>
 8001190:	e000      	b.n	8001194 <processCommand+0x19c>
        return;
 8001192:	bf00      	nop
    }
}
 8001194:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08004dc8 	.word	0x08004dc8
 80011a0:	08004dcc 	.word	0x08004dcc
 80011a4:	08004dd0 	.word	0x08004dd0
 80011a8:	08004dd4 	.word	0x08004dd4
 80011ac:	08004dd8 	.word	0x08004dd8
 80011b0:	20001198 	.word	0x20001198
 80011b4:	20001118 	.word	0x20001118
 80011b8:	200000c0 	.word	0x200000c0
 80011bc:	08004ddc 	.word	0x08004ddc
 80011c0:	08004de0 	.word	0x08004de0
 80011c4:	2000119a 	.word	0x2000119a

080011c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	@ (800120c <HAL_UART_RxCpltCallback+0x44>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d115      	bne.n	8001204 <HAL_UART_RxCpltCallback+0x3c>
		 USART_RX_Empty++;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <HAL_UART_RxCpltCallback+0x48>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a0c      	ldr	r2, [pc, #48]	@ (8001210 <HAL_UART_RxCpltCallback+0x48>)
 80011e0:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Empty>=USART_RXBUF_LEN)USART_RX_Empty=0; // Zawijanie wskaznika
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <HAL_UART_RxCpltCallback+0x48>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ea:	db02      	blt.n	80011f2 <HAL_UART_RxCpltCallback+0x2a>
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_UART_RxCpltCallback+0x48>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1); // Kontynuacja odbioru
 80011f2:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <HAL_UART_RxCpltCallback+0x48>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_UART_RxCpltCallback+0x4c>)
 80011f8:	4413      	add	r3, r2
 80011fa:	2201      	movs	r2, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	4803      	ldr	r0, [pc, #12]	@ (800120c <HAL_UART_RxCpltCallback+0x44>)
 8001200:	f002 f977 	bl	80034f2 <HAL_UART_Receive_IT>

	 }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000c0 	.word	0x200000c0
 8001210:	20001110 	.word	0x20001110
 8001214:	20000d08 	.word	0x20000d08

08001218 <resetFrameState>:

void resetFrameState() {
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
    frameState.inFrame = false;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <resetFrameState+0x24>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
    frameState.escapeDetected = false;
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <resetFrameState+0x24>)
 8001224:	2200      	movs	r2, #0
 8001226:	705a      	strb	r2, [r3, #1]
    frameState.bxIndex = 0;
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <resetFrameState+0x24>)
 800122a:	2200      	movs	r2, #0
 800122c:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000119c 	.word	0x2000119c

08001240 <processReceivedChar>:
    } else {
        sendResponse("FAL");
    }
}

void processReceivedChar(uint8_t receivedChar) {    
 8001240:	b580      	push	{r7, lr}
 8001242:	b0c4      	sub	sp, #272	@ 0x110
 8001244:	af00      	add	r7, sp, #0
 8001246:	4602      	mov	r2, r0
 8001248:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800124c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001250:	701a      	strb	r2, [r3, #0]
    if (receivedChar == FRAME_START) {
 8001252:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001256:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b7e      	cmp	r3, #126	@ 0x7e
 800125e:	d116      	bne.n	800128e <processReceivedChar+0x4e>
        resetFrameState();
 8001260:	f7ff ffda 	bl	8001218 <resetFrameState>
        frameState.inFrame = true;
 8001264:	4b6a      	ldr	r3, [pc, #424]	@ (8001410 <processReceivedChar+0x1d0>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
        frameState.bx[frameState.bxIndex++] = receivedChar;
 800126a:	4b69      	ldr	r3, [pc, #420]	@ (8001410 <processReceivedChar+0x1d0>)
 800126c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	b291      	uxth	r1, r2
 8001274:	4a66      	ldr	r2, [pc, #408]	@ (8001410 <processReceivedChar+0x1d0>)
 8001276:	f8a2 1202 	strh.w	r1, [r2, #514]	@ 0x202
 800127a:	461a      	mov	r2, r3
 800127c:	4b64      	ldr	r3, [pc, #400]	@ (8001410 <processReceivedChar+0x1d0>)
 800127e:	4413      	add	r3, r2
 8001280:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001284:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	709a      	strb	r2, [r3, #2]
        } 
        else {
            sendResponse("FAL"); // Ramka za długa
            resetFrameState();
        }
    }
 800128c:	e0ba      	b.n	8001404 <processReceivedChar+0x1c4>
    else if (receivedChar == FRAME_END && !frameState.escapeDetected) {
 800128e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001292:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b7c      	cmp	r3, #124	@ 0x7c
 800129a:	d134      	bne.n	8001306 <processReceivedChar+0xc6>
 800129c:	4b5c      	ldr	r3, [pc, #368]	@ (8001410 <processReceivedChar+0x1d0>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	f083 0301 	eor.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d02d      	beq.n	8001306 <processReceivedChar+0xc6>
        if (frameState.inFrame) {
 80012aa:	4b59      	ldr	r3, [pc, #356]	@ (8001410 <processReceivedChar+0x1d0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80a8 	beq.w	8001404 <processReceivedChar+0x1c4>
            frameState.bx[frameState.bxIndex++] = receivedChar;
 80012b4:	4b56      	ldr	r3, [pc, #344]	@ (8001410 <processReceivedChar+0x1d0>)
 80012b6:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	b291      	uxth	r1, r2
 80012be:	4a54      	ldr	r2, [pc, #336]	@ (8001410 <processReceivedChar+0x1d0>)
 80012c0:	f8a2 1202 	strh.w	r1, [r2, #514]	@ 0x202
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b52      	ldr	r3, [pc, #328]	@ (8001410 <processReceivedChar+0x1d0>)
 80012c8:	4413      	add	r3, r2
 80012ca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012ce:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	709a      	strb	r2, [r3, #2]
            if (decodeFrame(&frameState, frameState.bxIndex, &decodedFrame)) {
 80012d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001410 <processReceivedChar+0x1d0>)
 80012d8:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	4619      	mov	r1, r3
 80012e2:	484b      	ldr	r0, [pc, #300]	@ (8001410 <processReceivedChar+0x1d0>)
 80012e4:	f7ff fb28 	bl	8000938 <decodeFrame>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <processReceivedChar+0xba>
                processCommand(&decodedFrame);
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe80 	bl	8000ff8 <processCommand>
 80012f8:	e002      	b.n	8001300 <processReceivedChar+0xc0>
                sendResponse("FAL"); // Błąd dekodowania
 80012fa:	4846      	ldr	r0, [pc, #280]	@ (8001414 <processReceivedChar+0x1d4>)
 80012fc:	f7ff fe10 	bl	8000f20 <sendResponse>
            resetFrameState();
 8001300:	f7ff ff8a 	bl	8001218 <resetFrameState>
        if (frameState.inFrame) {
 8001304:	e07e      	b.n	8001404 <processReceivedChar+0x1c4>
    else if (frameState.inFrame) {
 8001306:	4b42      	ldr	r3, [pc, #264]	@ (8001410 <processReceivedChar+0x1d0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d074      	beq.n	80013f8 <processReceivedChar+0x1b8>
            if (frameState.escapeDetected) {
 800130e:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <processReceivedChar+0x1d0>)
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d047      	beq.n	80013a6 <processReceivedChar+0x166>
                if (receivedChar == FRAME_START_STUFF) {
 8001316:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800131a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b5e      	cmp	r3, #94	@ 0x5e
 8001322:	d10d      	bne.n	8001340 <processReceivedChar+0x100>
                    frameState.bx[frameState.bxIndex++] = FRAME_START;
 8001324:	4b3a      	ldr	r3, [pc, #232]	@ (8001410 <processReceivedChar+0x1d0>)
 8001326:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	b291      	uxth	r1, r2
 800132e:	4a38      	ldr	r2, [pc, #224]	@ (8001410 <processReceivedChar+0x1d0>)
 8001330:	f8a2 1202 	strh.w	r1, [r2, #514]	@ 0x202
 8001334:	461a      	mov	r2, r3
 8001336:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <processReceivedChar+0x1d0>)
 8001338:	4413      	add	r3, r2
 800133a:	227e      	movs	r2, #126	@ 0x7e
 800133c:	709a      	strb	r2, [r3, #2]
 800133e:	e02e      	b.n	800139e <processReceivedChar+0x15e>
                else if (receivedChar == ESCAPE_CHAR_STUFF) {
 8001340:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001344:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b5d      	cmp	r3, #93	@ 0x5d
 800134c:	d10d      	bne.n	800136a <processReceivedChar+0x12a>
                    frameState.bx[frameState.bxIndex++] = ESCAPE_CHAR;
 800134e:	4b30      	ldr	r3, [pc, #192]	@ (8001410 <processReceivedChar+0x1d0>)
 8001350:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	b291      	uxth	r1, r2
 8001358:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <processReceivedChar+0x1d0>)
 800135a:	f8a2 1202 	strh.w	r1, [r2, #514]	@ 0x202
 800135e:	461a      	mov	r2, r3
 8001360:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <processReceivedChar+0x1d0>)
 8001362:	4413      	add	r3, r2
 8001364:	227d      	movs	r2, #125	@ 0x7d
 8001366:	709a      	strb	r2, [r3, #2]
 8001368:	e019      	b.n	800139e <processReceivedChar+0x15e>
                else if (receivedChar == FRAME_END_STUFF) {
 800136a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800136e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b5c      	cmp	r3, #92	@ 0x5c
 8001376:	d10d      	bne.n	8001394 <processReceivedChar+0x154>
                    frameState.bx[frameState.bxIndex++] = FRAME_END;
 8001378:	4b25      	ldr	r3, [pc, #148]	@ (8001410 <processReceivedChar+0x1d0>)
 800137a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	b291      	uxth	r1, r2
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <processReceivedChar+0x1d0>)
 8001384:	f8a2 1202 	strh.w	r1, [r2, #514]	@ 0x202
 8001388:	461a      	mov	r2, r3
 800138a:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <processReceivedChar+0x1d0>)
 800138c:	4413      	add	r3, r2
 800138e:	227c      	movs	r2, #124	@ 0x7c
 8001390:	709a      	strb	r2, [r3, #2]
 8001392:	e004      	b.n	800139e <processReceivedChar+0x15e>
                    sendResponse("FAL"); // Błędna sekwencja escape
 8001394:	481f      	ldr	r0, [pc, #124]	@ (8001414 <processReceivedChar+0x1d4>)
 8001396:	f7ff fdc3 	bl	8000f20 <sendResponse>
                    resetFrameState();
 800139a:	f7ff ff3d 	bl	8001218 <resetFrameState>
                frameState.escapeDetected = false;
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <processReceivedChar+0x1d0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	705a      	strb	r2, [r3, #1]
    }
 80013a4:	e02e      	b.n	8001404 <processReceivedChar+0x1c4>
            else if (receivedChar == ESCAPE_CHAR) {
 80013a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013aa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b7d      	cmp	r3, #125	@ 0x7d
 80013b2:	d103      	bne.n	80013bc <processReceivedChar+0x17c>
                frameState.escapeDetected = true;
 80013b4:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <processReceivedChar+0x1d0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	705a      	strb	r2, [r3, #1]
    }
 80013ba:	e023      	b.n	8001404 <processReceivedChar+0x1c4>
                if (frameState.bxIndex < MAX_FRAME_WITHOUT_STUFFING) {
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <processReceivedChar+0x1d0>)
 80013be:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80013c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013c6:	d211      	bcs.n	80013ec <processReceivedChar+0x1ac>
                    frameState.bx[frameState.bxIndex++] = receivedChar;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <processReceivedChar+0x1d0>)
 80013ca:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	b291      	uxth	r1, r2
 80013d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <processReceivedChar+0x1d0>)
 80013d4:	f8a2 1202 	strh.w	r1, [r2, #514]	@ 0x202
 80013d8:	461a      	mov	r2, r3
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <processReceivedChar+0x1d0>)
 80013dc:	4413      	add	r3, r2
 80013de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013e2:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	709a      	strb	r2, [r3, #2]
    }
 80013ea:	e00b      	b.n	8001404 <processReceivedChar+0x1c4>
                    sendResponse("FAL"); // Przepełnienie bufora
 80013ec:	4809      	ldr	r0, [pc, #36]	@ (8001414 <processReceivedChar+0x1d4>)
 80013ee:	f7ff fd97 	bl	8000f20 <sendResponse>
                    resetFrameState();
 80013f2:	f7ff ff11 	bl	8001218 <resetFrameState>
    }
 80013f6:	e005      	b.n	8001404 <processReceivedChar+0x1c4>
            sendResponse("FAL"); // Ramka za długa
 80013f8:	4806      	ldr	r0, [pc, #24]	@ (8001414 <processReceivedChar+0x1d4>)
 80013fa:	f7ff fd91 	bl	8000f20 <sendResponse>
            resetFrameState();
 80013fe:	f7ff ff0b 	bl	8001218 <resetFrameState>
    }
 8001402:	e7ff      	b.n	8001404 <processReceivedChar+0x1c4>
 8001404:	bf00      	nop
 8001406:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000119c 	.word	0x2000119c
 8001414:	08004dd0 	.word	0x08004dd0

08001418 <ascii_to_int>:
uint16_t ascii_to_int(const uint8_t* str) {
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    uint16_t result = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	81fb      	strh	r3, [r7, #14]
    while (*str >= '0' && *str <= '9') {
 8001424:	e00e      	b.n	8001444 <ascii_to_int+0x2c>
        result = result * 10 + (*str - '0');
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	461a      	mov	r2, r3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4413      	add	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	b29b      	uxth	r3, r3
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4413      	add	r3, r2
 8001438:	b29b      	uxth	r3, r3
 800143a:	3b30      	subs	r3, #48	@ 0x30
 800143c:	81fb      	strh	r3, [r7, #14]
        str++;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3301      	adds	r3, #1
 8001442:	607b      	str	r3, [r7, #4]
    while (*str >= '0' && *str <= '9') {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b2f      	cmp	r3, #47	@ 0x2f
 800144a:	d903      	bls.n	8001454 <ascii_to_int+0x3c>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b39      	cmp	r3, #57	@ 0x39
 8001452:	d9e8      	bls.n	8001426 <ascii_to_int+0xe>
    }
    return result;
 8001454:	89fb      	ldrh	r3, [r7, #14]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146a:	f000 fabd 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f829 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f000 f905 	bl	8001680 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001476:	f000 f883 	bl	8001580 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800147a:	f000 f8d7 	bl	800162c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <main+0x54>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <main+0x58>)
 8001484:	4413      	add	r3, r2
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <main+0x5c>)
 800148c:	f002 f831 	bl	80034f2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {
    // Sprawdzamy, czy w buforze są nowe dane
    if (USART_kbhit()) {
 8001490:	f7ff fc5c 	bl	8000d4c <USART_kbhit>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0fa      	beq.n	8001490 <main+0x2c>

        int16_t receivedChar = USART_getchar();
 800149a:	f7ff fc6b 	bl	8000d74 <USART_getchar>
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
        if (receivedChar != -1) {
 80014a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014aa:	d0f1      	beq.n	8001490 <main+0x2c>
            processReceivedChar((uint8_t)receivedChar);
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fec5 	bl	8001240 <processReceivedChar>
    if (USART_kbhit()) {
 80014b6:	e7eb      	b.n	8001490 <main+0x2c>
 80014b8:	20001110 	.word	0x20001110
 80014bc:	20000d08 	.word	0x20000d08
 80014c0:	200000c0 	.word	0x200000c0

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	@ 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	@ 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 ffae 	bl	8004434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <SystemClock_Config+0xb4>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <SystemClock_Config+0xb4>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <SystemClock_Config+0xb4>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <SystemClock_Config+0xb8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <SystemClock_Config+0xb8>)
 800150e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <SystemClock_Config+0xb8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2310      	movs	r3, #16
 800152a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fe0b 	bl	8002150 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001540:	f000 f8f8 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f001 f86e 	bl	8002640 <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800156a:	f000 f8e3 	bl	8001734 <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3750      	adds	r7, #80	@ 0x50
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000

08001580 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_TIM2_Init+0xa8>)
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 80015aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_TIM2_Init+0xa8>)
 80015ac:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80015b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_TIM2_Init+0xa8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <MX_TIM2_Init+0xa8>)
 80015ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_TIM2_Init+0xa8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <MX_TIM2_Init+0xa8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80015cc:	4816      	ldr	r0, [pc, #88]	@ (8001628 <MX_TIM2_Init+0xa8>)
 80015ce:	f001 fa17 	bl	8002a00 <HAL_TIM_OC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80015d8:	f000 f8ac 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	4619      	mov	r1, r3
 80015ea:	480f      	ldr	r0, [pc, #60]	@ (8001628 <MX_TIM2_Init+0xa8>)
 80015ec:	f001 fdee 	bl	80031cc <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80015f6:	f000 f89d 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	220c      	movs	r2, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_TIM2_Init+0xa8>)
 8001612:	f001 fb35 	bl	8002c80 <HAL_TIM_OC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800161c:	f000 f88a 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	@ 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000078 	.word	0x20000078

0800162c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 8001632:	4a12      	ldr	r2, [pc, #72]	@ (800167c <MX_USART2_UART_Init+0x50>)
 8001634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_USART2_UART_Init+0x4c>)
 8001664:	f001 fe34 	bl	80032d0 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800166e:	f000 f861 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000c0 	.word	0x200000c0
 800167c:	40004400 	.word	0x40004400

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <MX_GPIO_Init+0xa8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <MX_GPIO_Init+0xa8>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <MX_GPIO_Init+0xa8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <MX_GPIO_Init+0xa8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <MX_GPIO_Init+0xa8>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <MX_GPIO_Init+0xa8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d4:	4815      	ldr	r0, [pc, #84]	@ (800172c <MX_GPIO_Init+0xac>)
 80016d6:	f000 fd21 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2120      	movs	r1, #32
 80016de:	4814      	ldr	r0, [pc, #80]	@ (8001730 <MX_GPIO_Init+0xb0>)
 80016e0:	f000 fd1c 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4619      	mov	r1, r3
 80016fc:	480b      	ldr	r0, [pc, #44]	@ (800172c <MX_GPIO_Init+0xac>)
 80016fe:	f000 fb89 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001702:	2320      	movs	r3, #32
 8001704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_GPIO_Init+0xb0>)
 800171a:	f000 fb7b 	bl	8001e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a0:	d115      	bne.n	80017ce <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_TIM_OC_MspInit+0x48>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_TIM_OC_MspInit+0x48>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_TIM_OC_MspInit+0x48>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	201c      	movs	r0, #28
 80017c4:	f000 fa5d 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017c8:	201c      	movs	r0, #28
 80017ca:	f000 fa76 	bl	8001cba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_UART_MspInit+0x94>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d133      	bne.n	8001866 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	6413      	str	r3, [r2, #64]	@ 0x40
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_UART_MspInit+0x98>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001836:	230c      	movs	r3, #12
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4809      	ldr	r0, [pc, #36]	@ (8001878 <HAL_UART_MspInit+0x9c>)
 8001852:	f000 fadf 	bl	8001e14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2026      	movs	r0, #38	@ 0x26
 800185c:	f000 fa11 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001860:	2026      	movs	r0, #38	@ 0x26
 8001862:	f000 fa2a 	bl	8001cba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40004400 	.word	0x40004400
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d2:	f000 f8db 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <TIM2_IRQHandler+0x10>)
 80018e2:	f001 f8dc 	bl	8002a9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000078 	.word	0x20000078

080018f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <USART2_IRQHandler+0x10>)
 80018f6:	f001 fe21 	bl	800353c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000c0 	.word	0x200000c0

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	@ (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f002 fd86 	bl	8004444 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20020000 	.word	0x20020000
 8001964:	00000400 	.word	0x00000400
 8001968:	200013a0 	.word	0x200013a0
 800196c:	200014f0 	.word	0x200014f0

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001998:	f7ff ffea 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c2:	f002 fd45 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff fd4d 	bl	8001464 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019d8:	08005044 	.word	0x08005044
  ldr r2, =_sbss
 80019dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80019e0:	200014f0 	.word	0x200014f0

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 f92b 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	200f      	movs	r0, #15
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fe90 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f943 	bl	8001cd6 <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f000 f90b 	bl	8001c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	@ (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	200013a4 	.word	0x200013a4

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	@ (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	200013a4 	.word	0x200013a4

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4907      	ldr	r1, [pc, #28]	@ (8001b68 <__NVIC_EnableIRQ+0x38>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff8e 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff29 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff3e 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff8e 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5d 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff31 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffa2 	bl	8001c28 <SysTick_Config>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff feda 	bl	8001ab4 <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d008      	beq.n	8001d20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2280      	movs	r2, #128	@ 0x80
 8001d12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e052      	b.n	8001dc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0216 	bic.w	r2, r2, #22
 8001d2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d103      	bne.n	8001d50 <HAL_DMA_Abort+0x62>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0208 	bic.w	r2, r2, #8
 8001d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d70:	e013      	b.n	8001d9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d72:	f7ff fe9f 	bl	8001ab4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d90c      	bls.n	8001d9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e015      	b.n	8001dc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e4      	bne.n	8001d72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	223f      	movs	r2, #63	@ 0x3f
 8001dae:	409a      	lsls	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d004      	beq.n	8001dec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2280      	movs	r2, #128	@ 0x80
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e00c      	b.n	8001e06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2205      	movs	r2, #5
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e159      	b.n	80020e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e30:	2201      	movs	r2, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f040 8148 	bne.w	80020de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d005      	beq.n	8001e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d130      	bne.n	8001ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 0201 	and.w	r2, r3, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d017      	beq.n	8001f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d123      	bne.n	8001f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	08da      	lsrs	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3208      	adds	r2, #8
 8001f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0203 	and.w	r2, r3, #3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80a2 	beq.w	80020de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b57      	ldr	r3, [pc, #348]	@ (80020fc <HAL_GPIO_Init+0x2e8>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	4a56      	ldr	r2, [pc, #344]	@ (80020fc <HAL_GPIO_Init+0x2e8>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001faa:	4b54      	ldr	r3, [pc, #336]	@ (80020fc <HAL_GPIO_Init+0x2e8>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb6:	4a52      	ldr	r2, [pc, #328]	@ (8002100 <HAL_GPIO_Init+0x2ec>)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a49      	ldr	r2, [pc, #292]	@ (8002104 <HAL_GPIO_Init+0x2f0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d019      	beq.n	8002016 <HAL_GPIO_Init+0x202>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a48      	ldr	r2, [pc, #288]	@ (8002108 <HAL_GPIO_Init+0x2f4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0x1fe>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a47      	ldr	r2, [pc, #284]	@ (800210c <HAL_GPIO_Init+0x2f8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00d      	beq.n	800200e <HAL_GPIO_Init+0x1fa>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a46      	ldr	r2, [pc, #280]	@ (8002110 <HAL_GPIO_Init+0x2fc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <HAL_GPIO_Init+0x1f6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a45      	ldr	r2, [pc, #276]	@ (8002114 <HAL_GPIO_Init+0x300>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_GPIO_Init+0x1f2>
 8002002:	2304      	movs	r3, #4
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x204>
 8002006:	2307      	movs	r3, #7
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x204>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x204>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x204>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x204>
 8002016:	2300      	movs	r3, #0
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	@ (8002100 <HAL_GPIO_Init+0x2ec>)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b38      	ldr	r3, [pc, #224]	@ (8002118 <HAL_GPIO_Init+0x304>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205a:	4a2f      	ldr	r2, [pc, #188]	@ (8002118 <HAL_GPIO_Init+0x304>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002060:	4b2d      	ldr	r3, [pc, #180]	@ (8002118 <HAL_GPIO_Init+0x304>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002084:	4a24      	ldr	r2, [pc, #144]	@ (8002118 <HAL_GPIO_Init+0x304>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208a:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <HAL_GPIO_Init+0x304>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002118 <HAL_GPIO_Init+0x304>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b4:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <HAL_GPIO_Init+0x304>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002118 <HAL_GPIO_Init+0x304>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f aea2 	bls.w	8001e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	@ 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40013c00 	.word	0x40013c00

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002138:	e003      	b.n	8002142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	041a      	lsls	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	619a      	str	r2, [r3, #24]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e267      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d075      	beq.n	800225a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800216e:	4b88      	ldr	r3, [pc, #544]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00c      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4b85      	ldr	r3, [pc, #532]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002182:	2b08      	cmp	r3, #8
 8002184:	d112      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002186:	4b82      	ldr	r3, [pc, #520]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b7e      	ldr	r3, [pc, #504]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05b      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d157      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e242      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b76      	ldr	r3, [pc, #472]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a75      	ldr	r2, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b70      	ldr	r3, [pc, #448]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6d      	ldr	r3, [pc, #436]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6c      	ldr	r2, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021e8:	4b69      	ldr	r3, [pc, #420]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a68      	ldr	r2, [pc, #416]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b66      	ldr	r3, [pc, #408]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fc54 	bl	8001ab4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fc50 	bl	8001ab4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e207      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5b      	ldr	r3, [pc, #364]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fc40 	bl	8001ab4 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fc3c 	bl	8001ab4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1f3      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b51      	ldr	r3, [pc, #324]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xe8>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002266:	4b4a      	ldr	r3, [pc, #296]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b44      	ldr	r3, [pc, #272]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c7      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4937      	ldr	r1, [pc, #220]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff fbf5 	bl	8001ab4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff fbf1 	bl	8001ab4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a8      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4925      	ldr	r1, [pc, #148]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7ff fbd4 	bl	8001ab4 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7ff fbd0 	bl	8001ab4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e187      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d036      	beq.n	80023a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_RCC_OscConfig+0x248>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7ff fbb4 	bl	8001ab4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff fbb0 	bl	8001ab4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e167      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x200>
 800236e:	e01b      	b.n	80023a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_OscConfig+0x248>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7ff fb9d 	bl	8001ab4 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	e00e      	b.n	800239c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237e:	f7ff fb99 	bl	8001ab4 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d907      	bls.n	800239c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e150      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
 8002390:	40023800 	.word	0x40023800
 8002394:	42470000 	.word	0x42470000
 8002398:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800239e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ea      	bne.n	800237e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8097 	beq.w	80024e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ba:	4b81      	ldr	r3, [pc, #516]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b7d      	ldr	r3, [pc, #500]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	4a7c      	ldr	r2, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d6:	4b7a      	ldr	r3, [pc, #488]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b77      	ldr	r3, [pc, #476]	@ (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b74      	ldr	r3, [pc, #464]	@ (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a73      	ldr	r2, [pc, #460]	@ (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7ff fb59 	bl	8001ab4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7ff fb55 	bl	8001ab4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e10c      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b6a      	ldr	r3, [pc, #424]	@ (80025c4 <HAL_RCC_OscConfig+0x474>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x2ea>
 800242c:	4b64      	ldr	r3, [pc, #400]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002430:	4a63      	ldr	r2, [pc, #396]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	@ 0x70
 8002438:	e01c      	b.n	8002474 <HAL_RCC_OscConfig+0x324>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x30c>
 8002442:	4b5f      	ldr	r3, [pc, #380]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	4a5e      	ldr	r2, [pc, #376]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	@ 0x70
 800244e:	4b5c      	ldr	r3, [pc, #368]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002452:	4a5b      	ldr	r2, [pc, #364]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6713      	str	r3, [r2, #112]	@ 0x70
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0x324>
 800245c:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a57      	ldr	r2, [pc, #348]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
 8002468:	4b55      	ldr	r3, [pc, #340]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246c:	4a54      	ldr	r2, [pc, #336]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff fb1a 	bl	8001ab4 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7ff fb16 	bl	8001ab4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0cb      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	4b49      	ldr	r3, [pc, #292]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0ee      	beq.n	8002484 <HAL_RCC_OscConfig+0x334>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7ff fb04 	bl	8001ab4 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7ff fb00 	bl	8001ab4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0b5      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c6:	4b3e      	ldr	r3, [pc, #248]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ee      	bne.n	80024b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d8:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	4a38      	ldr	r2, [pc, #224]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a1 	beq.w	8002630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ee:	4b34      	ldr	r3, [pc, #208]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d05c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d141      	bne.n	8002586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <HAL_RCC_OscConfig+0x478>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fad4 	bl	8001ab4 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7ff fad0 	bl	8001ab4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e087      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	019b      	lsls	r3, r3, #6
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	3b01      	subs	r3, #1
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	491b      	ldr	r1, [pc, #108]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCC_OscConfig+0x478>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff faa9 	bl	8001ab4 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff faa5 	bl	8001ab4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e05c      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x416>
 8002584:	e054      	b.n	8002630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_RCC_OscConfig+0x478>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff fa92 	bl	8001ab4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff fa8e 	bl	8001ab4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e045      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x444>
 80025b2:	e03d      	b.n	8002630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e038      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_RCC_OscConfig+0x4ec>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d028      	beq.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d121      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d11a      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002604:	4293      	cmp	r3, r2
 8002606:	d111      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	3b01      	subs	r3, #1
 8002616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d107      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0cc      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b68      	ldr	r3, [pc, #416]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d90c      	bls.n	800267c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b65      	ldr	r3, [pc, #404]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d044      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d119      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b3f      	ldr	r3, [pc, #252]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3b      	ldr	r3, [pc, #236]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e067      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b37      	ldr	r3, [pc, #220]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4934      	ldr	r1, [pc, #208]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7ff f9c0 	bl	8001ab4 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7ff f9bc 	bl	8001ab4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e04f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2b      	ldr	r3, [pc, #172]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b22      	ldr	r3, [pc, #136]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b2:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f920 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	08004fe8 	.word	0x08004fe8
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b090      	sub	sp, #64	@ 0x40
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4b59      	ldr	r3, [pc, #356]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d00d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 80a1 	bhi.w	8002978 <HAL_RCC_GetSysClockFreq+0x16c>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x3a>
 800283e:	e09b      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x184>)
 8002842:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002844:	e09b      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002846:	4b53      	ldr	r3, [pc, #332]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002848:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800284a:	e098      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284c:	4b4f      	ldr	r3, [pc, #316]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002854:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002856:	4b4d      	ldr	r3, [pc, #308]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d028      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b4a      	ldr	r3, [pc, #296]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	2200      	movs	r2, #0
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	627a      	str	r2, [r7, #36]	@ 0x24
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002874:	2100      	movs	r1, #0
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002878:	fb03 f201 	mul.w	r2, r3, r1
 800287c:	2300      	movs	r3, #0
 800287e:	fb00 f303 	mul.w	r3, r0, r3
 8002882:	4413      	add	r3, r2
 8002884:	4a43      	ldr	r2, [pc, #268]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002886:	fba0 1202 	umull	r1, r2, r0, r2
 800288a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800288c:	460a      	mov	r2, r1
 800288e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002892:	4413      	add	r3, r2
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002898:	2200      	movs	r2, #0
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	61fa      	str	r2, [r7, #28]
 800289e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028a6:	f7fd fcf3 	bl	8000290 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4613      	mov	r3, r2
 80028b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028b2:	e053      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b4:	4b35      	ldr	r3, [pc, #212]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	2200      	movs	r2, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	617a      	str	r2, [r7, #20]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028c6:	f04f 0b00 	mov.w	fp, #0
 80028ca:	4652      	mov	r2, sl
 80028cc:	465b      	mov	r3, fp
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028dc:	0150      	lsls	r0, r2, #5
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	ebb2 080a 	subs.w	r8, r2, sl
 80028e6:	eb63 090b 	sbc.w	r9, r3, fp
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002902:	eb63 0509 	sbc.w	r5, r3, r9
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	00eb      	lsls	r3, r5, #3
 8002910:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002914:	00e2      	lsls	r2, r4, #3
 8002916:	4614      	mov	r4, r2
 8002918:	461d      	mov	r5, r3
 800291a:	eb14 030a 	adds.w	r3, r4, sl
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	eb45 030b 	adc.w	r3, r5, fp
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002932:	4629      	mov	r1, r5
 8002934:	028b      	lsls	r3, r1, #10
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800293c:	4621      	mov	r1, r4
 800293e:	028a      	lsls	r2, r1, #10
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002946:	2200      	movs	r2, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	60fa      	str	r2, [r7, #12]
 800294c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002950:	f7fd fc9e 	bl	8000290 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800296c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002976:	e002      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x184>)
 800297a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800297c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002980:	4618      	mov	r0, r3
 8002982:	3740      	adds	r7, #64	@ 0x40
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	00f42400 	.word	0x00f42400
 8002994:	017d7840 	.word	0x017d7840

08002998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <HAL_RCC_GetHCLKFreq+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000

080029b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029b4:	f7ff fff0 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0a9b      	lsrs	r3, r3, #10
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	@ (80029d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08004ff8 	.word	0x08004ff8

080029d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029dc:	f7ff ffdc 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0b5b      	lsrs	r3, r3, #13
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4903      	ldr	r1, [pc, #12]	@ (80029fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08004ff8 	.word	0x08004ff8

08002a00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e041      	b.n	8002a96 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe feb2 	bl	8001790 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f000 f9ac 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01b      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0202 	mvn.w	r2, #2
 8002ad2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f939 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002aee:	e005      	b.n	8002afc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f92b 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f93c 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01b      	beq.n	8002b4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0204 	mvn.w	r2, #4
 8002b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f913 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002b3a:	e005      	b.n	8002b48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f905 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f916 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01b      	beq.n	8002b9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0208 	mvn.w	r2, #8
 8002b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8ed 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002b86:	e005      	b.n	8002b94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f8df 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8f0 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01b      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0210 	mvn.w	r2, #16
 8002bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2208      	movs	r2, #8
 8002bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f8c7 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002bd2:	e005      	b.n	8002be0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f8b9 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8ca 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00c      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f06f 0201 	mvn.w	r2, #1
 8002c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f897 	bl	8002d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00c      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fb47 	bl	80032bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f89b 	bl	8002d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00c      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0220 	mvn.w	r2, #32
 8002c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fb19 	bl	80032a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_OC_ConfigChannel+0x1e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e048      	b.n	8002d30 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	d839      	bhi.n	8002d20 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002cac:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002d21 	.word	0x08002d21
 8002cbc:	08002d21 	.word	0x08002d21
 8002cc0:	08002d21 	.word	0x08002d21
 8002cc4:	08002cf7 	.word	0x08002cf7
 8002cc8:	08002d21 	.word	0x08002d21
 8002ccc:	08002d21 	.word	0x08002d21
 8002cd0:	08002d21 	.word	0x08002d21
 8002cd4:	08002d05 	.word	0x08002d05
 8002cd8:	08002d21 	.word	0x08002d21
 8002cdc:	08002d21 	.word	0x08002d21
 8002ce0:	08002d21 	.word	0x08002d21
 8002ce4:	08002d13 	.word	0x08002d13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f8e0 	bl	8002eb4 <TIM_OC1_SetConfig>
      break;
 8002cf4:	e017      	b.n	8002d26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f93f 	bl	8002f80 <TIM_OC2_SetConfig>
      break;
 8002d02:	e010      	b.n	8002d26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f9a4 	bl	8003058 <TIM_OC3_SetConfig>
      break;
 8002d10:	e009      	b.n	8002d26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fa07 	bl	800312c <TIM_OC4_SetConfig>
      break;
 8002d1e:	e002      	b.n	8002d26 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	75fb      	strb	r3, [r7, #23]
      break;
 8002d24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a3a      	ldr	r2, [pc, #232]	@ (8002e98 <TIM_Base_SetConfig+0xfc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00f      	beq.n	8002dd4 <TIM_Base_SetConfig+0x38>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dba:	d00b      	beq.n	8002dd4 <TIM_Base_SetConfig+0x38>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a37      	ldr	r2, [pc, #220]	@ (8002e9c <TIM_Base_SetConfig+0x100>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0x38>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a36      	ldr	r2, [pc, #216]	@ (8002ea0 <TIM_Base_SetConfig+0x104>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a35      	ldr	r2, [pc, #212]	@ (8002ea4 <TIM_Base_SetConfig+0x108>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d108      	bne.n	8002de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a2b      	ldr	r2, [pc, #172]	@ (8002e98 <TIM_Base_SetConfig+0xfc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01b      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df4:	d017      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a28      	ldr	r2, [pc, #160]	@ (8002e9c <TIM_Base_SetConfig+0x100>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a27      	ldr	r2, [pc, #156]	@ (8002ea0 <TIM_Base_SetConfig+0x104>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00f      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <TIM_Base_SetConfig+0x108>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a25      	ldr	r2, [pc, #148]	@ (8002ea8 <TIM_Base_SetConfig+0x10c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a24      	ldr	r2, [pc, #144]	@ (8002eac <TIM_Base_SetConfig+0x110>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <TIM_Base_SetConfig+0x114>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e98 <TIM_Base_SetConfig+0xfc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d103      	bne.n	8002e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f023 0201 	bic.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	40000c00 	.word	0x40000c00
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800

08002eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f023 0201 	bic.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f023 0302 	bic.w	r3, r3, #2
 8002efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f7c <TIM_OC1_SetConfig+0xc8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d10c      	bne.n	8002f2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0308 	bic.w	r3, r3, #8
 8002f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <TIM_OC1_SetConfig+0xc8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	621a      	str	r2, [r3, #32]
}
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40010000 	.word	0x40010000

08002f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f023 0210 	bic.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 0320 	bic.w	r3, r3, #32
 8002fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a1e      	ldr	r2, [pc, #120]	@ (8003054 <TIM_OC2_SetConfig+0xd4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10d      	bne.n	8002ffc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a15      	ldr	r2, [pc, #84]	@ (8003054 <TIM_OC2_SetConfig+0xd4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d113      	bne.n	800302c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800300a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40010000 	.word	0x40010000

08003058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0303 	bic.w	r3, r3, #3
 800308e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <TIM_OC3_SetConfig+0xd0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10d      	bne.n	80030d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a14      	ldr	r2, [pc, #80]	@ (8003128 <TIM_OC3_SetConfig+0xd0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d113      	bne.n	8003102 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	621a      	str	r2, [r3, #32]
}
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40010000 	.word	0x40010000

0800312c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800315a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	031b      	lsls	r3, r3, #12
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a10      	ldr	r2, [pc, #64]	@ (80031c8 <TIM_OC4_SetConfig+0x9c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d109      	bne.n	80031a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	621a      	str	r2, [r3, #32]
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000

080031cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e050      	b.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800320a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1c      	ldr	r2, [pc, #112]	@ (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d018      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003230:	d013      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a18      	ldr	r2, [pc, #96]	@ (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00e      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d009      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a13      	ldr	r2, [pc, #76]	@ (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10c      	bne.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4313      	orrs	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40000c00 	.word	0x40000c00
 80032a4:	40014000 	.word	0x40014000

080032a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e042      	b.n	8003368 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe fa70 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	@ 0x24
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fde9 	bl	8003eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	@ 0x28
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b20      	cmp	r3, #32
 800338e:	d175      	bne.n	800347c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_UART_Transmit+0x2c>
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e06e      	b.n	800347e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2221      	movs	r2, #33	@ 0x21
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ae:	f7fe fb81 	bl	8001ab4 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033c8:	d108      	bne.n	80033dc <HAL_UART_Transmit+0x6c>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	e003      	b.n	80033e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033e4:	e02e      	b.n	8003444 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	@ 0x80
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fb4b 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e03a      	b.n	800347e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3302      	adds	r3, #2
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e007      	b.n	8003436 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	3301      	adds	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1cb      	bne.n	80033e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2200      	movs	r2, #0
 8003456:	2140      	movs	r1, #64	@ 0x40
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fb17 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e006      	b.n	800347e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b20      	cmp	r3, #32
 800349e:	d121      	bne.n	80034e4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_UART_Transmit_IT+0x26>
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e01a      	b.n	80034e6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	88fa      	ldrh	r2, [r7, #6]
 80034ba:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2221      	movs	r2, #33	@ 0x21
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	4613      	mov	r3, r2
 80034fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b20      	cmp	r3, #32
 800350a:	d112      	bne.n	8003532 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Receive_IT+0x26>
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e00b      	b.n	8003534 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	461a      	mov	r2, r3
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fb08 	bl	8003b3e <UART_Start_Receive_IT>
 800352e:	4603      	mov	r3, r0
 8003530:	e000      	b.n	8003534 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
  }
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b0ba      	sub	sp, #232	@ 0xe8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800357a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_UART_IRQHandler+0x66>
 800358e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fbe8 	bl	8003d70 <UART_Receive_IT>
      return;
 80035a0:	e25b      	b.n	8003a5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80de 	beq.w	8003768 <HAL_UART_IRQHandler+0x22c>
 80035ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80d1 	beq.w	8003768 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_UART_IRQHandler+0xae>
 80035d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_UART_IRQHandler+0xd2>
 80035f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_UART_IRQHandler+0xf6>
 800361a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f043 0204 	orr.w	r2, r3, #4
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d011      	beq.n	8003662 <HAL_UART_IRQHandler+0x126>
 800363e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d105      	bne.n	8003656 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800364a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	f043 0208 	orr.w	r2, r3, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 81f2 	beq.w	8003a50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800366c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_UART_IRQHandler+0x14e>
 8003678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fb73 	bl	8003d70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	2b40      	cmp	r3, #64	@ 0x40
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <HAL_UART_IRQHandler+0x17a>
 80036ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d04f      	beq.n	8003756 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa7b 	bl	8003bb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c6:	2b40      	cmp	r3, #64	@ 0x40
 80036c8:	d141      	bne.n	800374e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3314      	adds	r3, #20
 80036f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800370e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1d9      	bne.n	80036ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d013      	beq.n	8003746 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	4a7e      	ldr	r2, [pc, #504]	@ (800391c <HAL_UART_IRQHandler+0x3e0>)
 8003724:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fb4f 	bl	8001dce <HAL_DMA_Abort_IT>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003740:	4610      	mov	r0, r2
 8003742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	e00e      	b.n	8003764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f98a 	bl	8003a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	e00a      	b.n	8003764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f986 	bl	8003a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	e006      	b.n	8003764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f982 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003762:	e175      	b.n	8003a50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	bf00      	nop
    return;
 8003766:	e173      	b.n	8003a50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376c:	2b01      	cmp	r3, #1
 800376e:	f040 814f 	bne.w	8003a10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8148 	beq.w	8003a10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8141 	beq.w	8003a10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ae:	2b40      	cmp	r3, #64	@ 0x40
 80037b0:	f040 80b6 	bne.w	8003920 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8145 	beq.w	8003a54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037d2:	429a      	cmp	r2, r3
 80037d4:	f080 813e 	bcs.w	8003a54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ea:	f000 8088 	beq.w	80038fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	330c      	adds	r3, #12
 80037f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003804:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800380c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800381a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800381e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003826:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1d9      	bne.n	80037ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3314      	adds	r3, #20
 8003840:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800384a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800385e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003862:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003866:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e1      	bne.n	800383a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3314      	adds	r3, #20
 800387c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800388c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800389a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800389c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e3      	bne.n	8003876 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ce:	f023 0310 	bic.w	r3, r3, #16
 80038d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e3      	bne.n	80038bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe f9f8 	bl	8001cee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800390c:	b29b      	uxth	r3, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f8ad 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800391a:	e09b      	b.n	8003a54 <HAL_UART_IRQHandler+0x518>
 800391c:	08003c79 	.word	0x08003c79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003928:	b29b      	uxth	r3, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 808e 	beq.w	8003a58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800393c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8089 	beq.w	8003a58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800395c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800396a:	647a      	str	r2, [r7, #68]	@ 0x44
 800396c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003970:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e3      	bne.n	8003946 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	623b      	str	r3, [r7, #32]
   return(result);
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3314      	adds	r3, #20
 800399e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80039a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e3      	bne.n	800397e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0310 	bic.w	r3, r3, #16
 80039da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039e8:	61fa      	str	r2, [r7, #28]
 80039ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	69b9      	ldr	r1, [r7, #24]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	617b      	str	r3, [r7, #20]
   return(result);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e3      	bne.n	80039c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f833 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a0e:	e023      	b.n	8003a58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_UART_IRQHandler+0x4f4>
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f939 	bl	8003ca0 <UART_Transmit_IT>
    return;
 8003a2e:	e014      	b.n	8003a5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00e      	beq.n	8003a5a <HAL_UART_IRQHandler+0x51e>
 8003a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f979 	bl	8003d40 <UART_EndTransmit_IT>
    return;
 8003a4e:	e004      	b.n	8003a5a <HAL_UART_IRQHandler+0x51e>
    return;
 8003a50:	bf00      	nop
 8003a52:	e002      	b.n	8003a5a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a58:	bf00      	nop
  }
}
 8003a5a:	37e8      	adds	r7, #232	@ 0xe8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9c:	e03b      	b.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d037      	beq.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe f805 	bl	8001ab4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e03a      	b.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d023      	beq.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b80      	cmp	r3, #128	@ 0x80
 8003ad2:	d020      	beq.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b40      	cmp	r3, #64	@ 0x40
 8003ad8:	d01d      	beq.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d116      	bne.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f857 	bl	8003bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2208      	movs	r2, #8
 8003b08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e00f      	b.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	bf0c      	ite	eq
 8003b26:	2301      	moveq	r3, #1
 8003b28:	2300      	movne	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d0b4      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2222      	movs	r2, #34	@ 0x22
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0220 	orr.w	r2, r2, #32
 8003ba2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b095      	sub	sp, #84	@ 0x54
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bda:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003be0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e5      	bne.n	8003bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e5      	bne.n	8003bee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d119      	bne.n	8003c5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4a:	61ba      	str	r2, [r7, #24]
 8003c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6979      	ldr	r1, [r7, #20]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	613b      	str	r3, [r7, #16]
   return(result);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e5      	bne.n	8003c2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c6c:	bf00      	nop
 8003c6e:	3754      	adds	r7, #84	@ 0x54
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fee4 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b21      	cmp	r3, #33	@ 0x21
 8003cb2:	d13e      	bne.n	8003d32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbc:	d114      	bne.n	8003ce8 <UART_Transmit_IT+0x48>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d110      	bne.n	8003ce8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	621a      	str	r2, [r3, #32]
 8003ce6:	e008      	b.n	8003cfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	1c59      	adds	r1, r3, #1
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6211      	str	r1, [r2, #32]
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4619      	mov	r1, r3
 8003d08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e000      	b.n	8003d34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d32:	2302      	movs	r3, #2
  }
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd f8a9 	bl	8000eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	@ 0x30
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b22      	cmp	r3, #34	@ 0x22
 8003d82:	f040 80ae 	bne.w	8003ee2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8e:	d117      	bne.n	8003dc0 <UART_Receive_IT+0x50>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d113      	bne.n	8003dc0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	1c9a      	adds	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dbe:	e026      	b.n	8003e0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d007      	beq.n	8003de4 <UART_Receive_IT+0x74>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <UART_Receive_IT+0x82>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d15d      	bne.n	8003ede <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0220 	bic.w	r2, r2, #32
 8003e30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d135      	bne.n	8003ed4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f023 0310 	bic.w	r3, r3, #16
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8e:	623a      	str	r2, [r7, #32]
 8003e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d10a      	bne.n	8003ec6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fdd1 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
 8003ed2:	e002      	b.n	8003eda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fd f977 	bl	80011c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e002      	b.n	8003ee4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3730      	adds	r7, #48	@ 0x30
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef0:	b0c0      	sub	sp, #256	@ 0x100
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	68d9      	ldr	r1, [r3, #12]
 8003f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	ea40 0301 	orr.w	r3, r0, r1
 8003f14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f44:	f021 010c 	bic.w	r1, r1, #12
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f52:	430b      	orrs	r3, r1
 8003f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f66:	6999      	ldr	r1, [r3, #24]
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	ea40 0301 	orr.w	r3, r0, r1
 8003f72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b8f      	ldr	r3, [pc, #572]	@ (80041b8 <UART_SetConfig+0x2cc>)
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d005      	beq.n	8003f8c <UART_SetConfig+0xa0>
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b8d      	ldr	r3, [pc, #564]	@ (80041bc <UART_SetConfig+0x2d0>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d104      	bne.n	8003f96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f8c:	f7fe fd24 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8003f90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f94:	e003      	b.n	8003f9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f96:	f7fe fd0b 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8003f9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa8:	f040 810c 	bne.w	80041c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	1891      	adds	r1, r2, r2
 8003fc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fc6:	415b      	adcs	r3, r3
 8003fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fce:	4621      	mov	r1, r4
 8003fd0:	eb12 0801 	adds.w	r8, r2, r1
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	eb43 0901 	adc.w	r9, r3, r1
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fee:	4690      	mov	r8, r2
 8003ff0:	4699      	mov	r9, r3
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	eb18 0303 	adds.w	r3, r8, r3
 8003ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	eb49 0303 	adc.w	r3, r9, r3
 8004002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004012:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800401a:	460b      	mov	r3, r1
 800401c:	18db      	adds	r3, r3, r3
 800401e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004020:	4613      	mov	r3, r2
 8004022:	eb42 0303 	adc.w	r3, r2, r3
 8004026:	657b      	str	r3, [r7, #84]	@ 0x54
 8004028:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800402c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004030:	f7fc f92e 	bl	8000290 <__aeabi_uldivmod>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4b61      	ldr	r3, [pc, #388]	@ (80041c0 <UART_SetConfig+0x2d4>)
 800403a:	fba3 2302 	umull	r2, r3, r3, r2
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	011c      	lsls	r4, r3, #4
 8004042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004046:	2200      	movs	r2, #0
 8004048:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800404c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004050:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004054:	4642      	mov	r2, r8
 8004056:	464b      	mov	r3, r9
 8004058:	1891      	adds	r1, r2, r2
 800405a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800405c:	415b      	adcs	r3, r3
 800405e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004060:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004064:	4641      	mov	r1, r8
 8004066:	eb12 0a01 	adds.w	sl, r2, r1
 800406a:	4649      	mov	r1, r9
 800406c:	eb43 0b01 	adc.w	fp, r3, r1
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800407c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004084:	4692      	mov	sl, r2
 8004086:	469b      	mov	fp, r3
 8004088:	4643      	mov	r3, r8
 800408a:	eb1a 0303 	adds.w	r3, sl, r3
 800408e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004092:	464b      	mov	r3, r9
 8004094:	eb4b 0303 	adc.w	r3, fp, r3
 8004098:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040b0:	460b      	mov	r3, r1
 80040b2:	18db      	adds	r3, r3, r3
 80040b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040b6:	4613      	mov	r3, r2
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80040be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040c6:	f7fc f8e3 	bl	8000290 <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	4b3b      	ldr	r3, [pc, #236]	@ (80041c0 <UART_SetConfig+0x2d4>)
 80040d2:	fba3 2301 	umull	r2, r3, r3, r1
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	2264      	movs	r2, #100	@ 0x64
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	1acb      	subs	r3, r1, r3
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040e6:	4b36      	ldr	r3, [pc, #216]	@ (80041c0 <UART_SetConfig+0x2d4>)
 80040e8:	fba3 2302 	umull	r2, r3, r3, r2
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040f4:	441c      	add	r4, r3
 80040f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004100:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004104:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004108:	4642      	mov	r2, r8
 800410a:	464b      	mov	r3, r9
 800410c:	1891      	adds	r1, r2, r2
 800410e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004110:	415b      	adcs	r3, r3
 8004112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004114:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004118:	4641      	mov	r1, r8
 800411a:	1851      	adds	r1, r2, r1
 800411c:	6339      	str	r1, [r7, #48]	@ 0x30
 800411e:	4649      	mov	r1, r9
 8004120:	414b      	adcs	r3, r1
 8004122:	637b      	str	r3, [r7, #52]	@ 0x34
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004130:	4659      	mov	r1, fp
 8004132:	00cb      	lsls	r3, r1, #3
 8004134:	4651      	mov	r1, sl
 8004136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800413a:	4651      	mov	r1, sl
 800413c:	00ca      	lsls	r2, r1, #3
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	4603      	mov	r3, r0
 8004144:	4642      	mov	r2, r8
 8004146:	189b      	adds	r3, r3, r2
 8004148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800414c:	464b      	mov	r3, r9
 800414e:	460a      	mov	r2, r1
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004164:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800416c:	460b      	mov	r3, r1
 800416e:	18db      	adds	r3, r3, r3
 8004170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004172:	4613      	mov	r3, r2
 8004174:	eb42 0303 	adc.w	r3, r2, r3
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800417e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004182:	f7fc f885 	bl	8000290 <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <UART_SetConfig+0x2d4>)
 800418c:	fba3 1302 	umull	r1, r3, r3, r2
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	2164      	movs	r1, #100	@ 0x64
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	3332      	adds	r3, #50	@ 0x32
 800419e:	4a08      	ldr	r2, [pc, #32]	@ (80041c0 <UART_SetConfig+0x2d4>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	f003 0207 	and.w	r2, r3, #7
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4422      	add	r2, r4
 80041b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041b4:	e106      	b.n	80043c4 <UART_SetConfig+0x4d8>
 80041b6:	bf00      	nop
 80041b8:	40011000 	.word	0x40011000
 80041bc:	40011400 	.word	0x40011400
 80041c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041d6:	4642      	mov	r2, r8
 80041d8:	464b      	mov	r3, r9
 80041da:	1891      	adds	r1, r2, r2
 80041dc:	6239      	str	r1, [r7, #32]
 80041de:	415b      	adcs	r3, r3
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041e6:	4641      	mov	r1, r8
 80041e8:	1854      	adds	r4, r2, r1
 80041ea:	4649      	mov	r1, r9
 80041ec:	eb43 0501 	adc.w	r5, r3, r1
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	00eb      	lsls	r3, r5, #3
 80041fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fe:	00e2      	lsls	r2, r4, #3
 8004200:	4614      	mov	r4, r2
 8004202:	461d      	mov	r5, r3
 8004204:	4643      	mov	r3, r8
 8004206:	18e3      	adds	r3, r4, r3
 8004208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800420c:	464b      	mov	r3, r9
 800420e:	eb45 0303 	adc.w	r3, r5, r3
 8004212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004222:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004232:	4629      	mov	r1, r5
 8004234:	008b      	lsls	r3, r1, #2
 8004236:	4621      	mov	r1, r4
 8004238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800423c:	4621      	mov	r1, r4
 800423e:	008a      	lsls	r2, r1, #2
 8004240:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004244:	f7fc f824 	bl	8000290 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4b60      	ldr	r3, [pc, #384]	@ (80043d0 <UART_SetConfig+0x4e4>)
 800424e:	fba3 2302 	umull	r2, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	011c      	lsls	r4, r3, #4
 8004256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004260:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004264:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004268:	4642      	mov	r2, r8
 800426a:	464b      	mov	r3, r9
 800426c:	1891      	adds	r1, r2, r2
 800426e:	61b9      	str	r1, [r7, #24]
 8004270:	415b      	adcs	r3, r3
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004278:	4641      	mov	r1, r8
 800427a:	1851      	adds	r1, r2, r1
 800427c:	6139      	str	r1, [r7, #16]
 800427e:	4649      	mov	r1, r9
 8004280:	414b      	adcs	r3, r1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004290:	4659      	mov	r1, fp
 8004292:	00cb      	lsls	r3, r1, #3
 8004294:	4651      	mov	r1, sl
 8004296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800429a:	4651      	mov	r1, sl
 800429c:	00ca      	lsls	r2, r1, #3
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	4642      	mov	r2, r8
 80042a6:	189b      	adds	r3, r3, r2
 80042a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042ac:	464b      	mov	r3, r9
 80042ae:	460a      	mov	r2, r1
 80042b0:	eb42 0303 	adc.w	r3, r2, r3
 80042b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042d0:	4649      	mov	r1, r9
 80042d2:	008b      	lsls	r3, r1, #2
 80042d4:	4641      	mov	r1, r8
 80042d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042da:	4641      	mov	r1, r8
 80042dc:	008a      	lsls	r2, r1, #2
 80042de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042e2:	f7fb ffd5 	bl	8000290 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4611      	mov	r1, r2
 80042ec:	4b38      	ldr	r3, [pc, #224]	@ (80043d0 <UART_SetConfig+0x4e4>)
 80042ee:	fba3 2301 	umull	r2, r3, r3, r1
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	2264      	movs	r2, #100	@ 0x64
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	1acb      	subs	r3, r1, r3
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	3332      	adds	r3, #50	@ 0x32
 8004300:	4a33      	ldr	r2, [pc, #204]	@ (80043d0 <UART_SetConfig+0x4e4>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800430c:	441c      	add	r4, r3
 800430e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004312:	2200      	movs	r2, #0
 8004314:	673b      	str	r3, [r7, #112]	@ 0x70
 8004316:	677a      	str	r2, [r7, #116]	@ 0x74
 8004318:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800431c:	4642      	mov	r2, r8
 800431e:	464b      	mov	r3, r9
 8004320:	1891      	adds	r1, r2, r2
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	415b      	adcs	r3, r3
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800432c:	4641      	mov	r1, r8
 800432e:	1851      	adds	r1, r2, r1
 8004330:	6039      	str	r1, [r7, #0]
 8004332:	4649      	mov	r1, r9
 8004334:	414b      	adcs	r3, r1
 8004336:	607b      	str	r3, [r7, #4]
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004344:	4659      	mov	r1, fp
 8004346:	00cb      	lsls	r3, r1, #3
 8004348:	4651      	mov	r1, sl
 800434a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800434e:	4651      	mov	r1, sl
 8004350:	00ca      	lsls	r2, r1, #3
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	4603      	mov	r3, r0
 8004358:	4642      	mov	r2, r8
 800435a:	189b      	adds	r3, r3, r2
 800435c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800435e:	464b      	mov	r3, r9
 8004360:	460a      	mov	r2, r1
 8004362:	eb42 0303 	adc.w	r3, r2, r3
 8004366:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	663b      	str	r3, [r7, #96]	@ 0x60
 8004372:	667a      	str	r2, [r7, #100]	@ 0x64
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004380:	4649      	mov	r1, r9
 8004382:	008b      	lsls	r3, r1, #2
 8004384:	4641      	mov	r1, r8
 8004386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800438a:	4641      	mov	r1, r8
 800438c:	008a      	lsls	r2, r1, #2
 800438e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004392:	f7fb ff7d 	bl	8000290 <__aeabi_uldivmod>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <UART_SetConfig+0x4e4>)
 800439c:	fba3 1302 	umull	r1, r3, r3, r2
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	2164      	movs	r1, #100	@ 0x64
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	3332      	adds	r3, #50	@ 0x32
 80043ae:	4a08      	ldr	r2, [pc, #32]	@ (80043d0 <UART_SetConfig+0x4e4>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	f003 020f 	and.w	r2, r3, #15
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4422      	add	r2, r4
 80043c2:	609a      	str	r2, [r3, #8]
}
 80043c4:	bf00      	nop
 80043c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043ca:	46bd      	mov	sp, r7
 80043cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d0:	51eb851f 	.word	0x51eb851f

080043d4 <_vsiprintf_r>:
 80043d4:	b500      	push	{lr}
 80043d6:	b09b      	sub	sp, #108	@ 0x6c
 80043d8:	9100      	str	r1, [sp, #0]
 80043da:	9104      	str	r1, [sp, #16]
 80043dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80043e0:	9105      	str	r1, [sp, #20]
 80043e2:	9102      	str	r1, [sp, #8]
 80043e4:	4905      	ldr	r1, [pc, #20]	@ (80043fc <_vsiprintf_r+0x28>)
 80043e6:	9103      	str	r1, [sp, #12]
 80043e8:	4669      	mov	r1, sp
 80043ea:	f000 f9b9 	bl	8004760 <_svfiprintf_r>
 80043ee:	9b00      	ldr	r3, [sp, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	b01b      	add	sp, #108	@ 0x6c
 80043f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80043fa:	bf00      	nop
 80043fc:	ffff0208 	.word	0xffff0208

08004400 <vsiprintf>:
 8004400:	4613      	mov	r3, r2
 8004402:	460a      	mov	r2, r1
 8004404:	4601      	mov	r1, r0
 8004406:	4802      	ldr	r0, [pc, #8]	@ (8004410 <vsiprintf+0x10>)
 8004408:	6800      	ldr	r0, [r0, #0]
 800440a:	f7ff bfe3 	b.w	80043d4 <_vsiprintf_r>
 800440e:	bf00      	nop
 8004410:	2000000c 	.word	0x2000000c

08004414 <memcmp>:
 8004414:	b510      	push	{r4, lr}
 8004416:	3901      	subs	r1, #1
 8004418:	4402      	add	r2, r0
 800441a:	4290      	cmp	r0, r2
 800441c:	d101      	bne.n	8004422 <memcmp+0xe>
 800441e:	2000      	movs	r0, #0
 8004420:	e005      	b.n	800442e <memcmp+0x1a>
 8004422:	7803      	ldrb	r3, [r0, #0]
 8004424:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004428:	42a3      	cmp	r3, r4
 800442a:	d001      	beq.n	8004430 <memcmp+0x1c>
 800442c:	1b18      	subs	r0, r3, r4
 800442e:	bd10      	pop	{r4, pc}
 8004430:	3001      	adds	r0, #1
 8004432:	e7f2      	b.n	800441a <memcmp+0x6>

08004434 <memset>:
 8004434:	4402      	add	r2, r0
 8004436:	4603      	mov	r3, r0
 8004438:	4293      	cmp	r3, r2
 800443a:	d100      	bne.n	800443e <memset+0xa>
 800443c:	4770      	bx	lr
 800443e:	f803 1b01 	strb.w	r1, [r3], #1
 8004442:	e7f9      	b.n	8004438 <memset+0x4>

08004444 <__errno>:
 8004444:	4b01      	ldr	r3, [pc, #4]	@ (800444c <__errno+0x8>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	2000000c 	.word	0x2000000c

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	4d0d      	ldr	r5, [pc, #52]	@ (8004488 <__libc_init_array+0x38>)
 8004454:	4c0d      	ldr	r4, [pc, #52]	@ (800448c <__libc_init_array+0x3c>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	2600      	movs	r6, #0
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	4d0b      	ldr	r5, [pc, #44]	@ (8004490 <__libc_init_array+0x40>)
 8004462:	4c0c      	ldr	r4, [pc, #48]	@ (8004494 <__libc_init_array+0x44>)
 8004464:	f000 fc66 	bl	8004d34 <_init>
 8004468:	1b64      	subs	r4, r4, r5
 800446a:	10a4      	asrs	r4, r4, #2
 800446c:	2600      	movs	r6, #0
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	0800503c 	.word	0x0800503c
 800448c:	0800503c 	.word	0x0800503c
 8004490:	0800503c 	.word	0x0800503c
 8004494:	08005040 	.word	0x08005040

08004498 <__retarget_lock_acquire_recursive>:
 8004498:	4770      	bx	lr

0800449a <__retarget_lock_release_recursive>:
 800449a:	4770      	bx	lr

0800449c <memcpy>:
 800449c:	440a      	add	r2, r1
 800449e:	4291      	cmp	r1, r2
 80044a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80044a4:	d100      	bne.n	80044a8 <memcpy+0xc>
 80044a6:	4770      	bx	lr
 80044a8:	b510      	push	{r4, lr}
 80044aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b2:	4291      	cmp	r1, r2
 80044b4:	d1f9      	bne.n	80044aa <memcpy+0xe>
 80044b6:	bd10      	pop	{r4, pc}

080044b8 <_free_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4605      	mov	r5, r0
 80044bc:	2900      	cmp	r1, #0
 80044be:	d041      	beq.n	8004544 <_free_r+0x8c>
 80044c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c4:	1f0c      	subs	r4, r1, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bfb8      	it	lt
 80044ca:	18e4      	addlt	r4, r4, r3
 80044cc:	f000 f8e0 	bl	8004690 <__malloc_lock>
 80044d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004548 <_free_r+0x90>)
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	b933      	cbnz	r3, 80044e4 <_free_r+0x2c>
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	6014      	str	r4, [r2, #0]
 80044da:	4628      	mov	r0, r5
 80044dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044e0:	f000 b8dc 	b.w	800469c <__malloc_unlock>
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	d908      	bls.n	80044fa <_free_r+0x42>
 80044e8:	6820      	ldr	r0, [r4, #0]
 80044ea:	1821      	adds	r1, r4, r0
 80044ec:	428b      	cmp	r3, r1
 80044ee:	bf01      	itttt	eq
 80044f0:	6819      	ldreq	r1, [r3, #0]
 80044f2:	685b      	ldreq	r3, [r3, #4]
 80044f4:	1809      	addeq	r1, r1, r0
 80044f6:	6021      	streq	r1, [r4, #0]
 80044f8:	e7ed      	b.n	80044d6 <_free_r+0x1e>
 80044fa:	461a      	mov	r2, r3
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	b10b      	cbz	r3, 8004504 <_free_r+0x4c>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d9fa      	bls.n	80044fa <_free_r+0x42>
 8004504:	6811      	ldr	r1, [r2, #0]
 8004506:	1850      	adds	r0, r2, r1
 8004508:	42a0      	cmp	r0, r4
 800450a:	d10b      	bne.n	8004524 <_free_r+0x6c>
 800450c:	6820      	ldr	r0, [r4, #0]
 800450e:	4401      	add	r1, r0
 8004510:	1850      	adds	r0, r2, r1
 8004512:	4283      	cmp	r3, r0
 8004514:	6011      	str	r1, [r2, #0]
 8004516:	d1e0      	bne.n	80044da <_free_r+0x22>
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	6053      	str	r3, [r2, #4]
 800451e:	4408      	add	r0, r1
 8004520:	6010      	str	r0, [r2, #0]
 8004522:	e7da      	b.n	80044da <_free_r+0x22>
 8004524:	d902      	bls.n	800452c <_free_r+0x74>
 8004526:	230c      	movs	r3, #12
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	e7d6      	b.n	80044da <_free_r+0x22>
 800452c:	6820      	ldr	r0, [r4, #0]
 800452e:	1821      	adds	r1, r4, r0
 8004530:	428b      	cmp	r3, r1
 8004532:	bf04      	itt	eq
 8004534:	6819      	ldreq	r1, [r3, #0]
 8004536:	685b      	ldreq	r3, [r3, #4]
 8004538:	6063      	str	r3, [r4, #4]
 800453a:	bf04      	itt	eq
 800453c:	1809      	addeq	r1, r1, r0
 800453e:	6021      	streq	r1, [r4, #0]
 8004540:	6054      	str	r4, [r2, #4]
 8004542:	e7ca      	b.n	80044da <_free_r+0x22>
 8004544:	bd38      	pop	{r3, r4, r5, pc}
 8004546:	bf00      	nop
 8004548:	200014ec 	.word	0x200014ec

0800454c <sbrk_aligned>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	4e0f      	ldr	r6, [pc, #60]	@ (800458c <sbrk_aligned+0x40>)
 8004550:	460c      	mov	r4, r1
 8004552:	6831      	ldr	r1, [r6, #0]
 8004554:	4605      	mov	r5, r0
 8004556:	b911      	cbnz	r1, 800455e <sbrk_aligned+0x12>
 8004558:	f000 fba6 	bl	8004ca8 <_sbrk_r>
 800455c:	6030      	str	r0, [r6, #0]
 800455e:	4621      	mov	r1, r4
 8004560:	4628      	mov	r0, r5
 8004562:	f000 fba1 	bl	8004ca8 <_sbrk_r>
 8004566:	1c43      	adds	r3, r0, #1
 8004568:	d103      	bne.n	8004572 <sbrk_aligned+0x26>
 800456a:	f04f 34ff 	mov.w	r4, #4294967295
 800456e:	4620      	mov	r0, r4
 8004570:	bd70      	pop	{r4, r5, r6, pc}
 8004572:	1cc4      	adds	r4, r0, #3
 8004574:	f024 0403 	bic.w	r4, r4, #3
 8004578:	42a0      	cmp	r0, r4
 800457a:	d0f8      	beq.n	800456e <sbrk_aligned+0x22>
 800457c:	1a21      	subs	r1, r4, r0
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fb92 	bl	8004ca8 <_sbrk_r>
 8004584:	3001      	adds	r0, #1
 8004586:	d1f2      	bne.n	800456e <sbrk_aligned+0x22>
 8004588:	e7ef      	b.n	800456a <sbrk_aligned+0x1e>
 800458a:	bf00      	nop
 800458c:	200014e8 	.word	0x200014e8

08004590 <_malloc_r>:
 8004590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004594:	1ccd      	adds	r5, r1, #3
 8004596:	f025 0503 	bic.w	r5, r5, #3
 800459a:	3508      	adds	r5, #8
 800459c:	2d0c      	cmp	r5, #12
 800459e:	bf38      	it	cc
 80045a0:	250c      	movcc	r5, #12
 80045a2:	2d00      	cmp	r5, #0
 80045a4:	4606      	mov	r6, r0
 80045a6:	db01      	blt.n	80045ac <_malloc_r+0x1c>
 80045a8:	42a9      	cmp	r1, r5
 80045aa:	d904      	bls.n	80045b6 <_malloc_r+0x26>
 80045ac:	230c      	movs	r3, #12
 80045ae:	6033      	str	r3, [r6, #0]
 80045b0:	2000      	movs	r0, #0
 80045b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800468c <_malloc_r+0xfc>
 80045ba:	f000 f869 	bl	8004690 <__malloc_lock>
 80045be:	f8d8 3000 	ldr.w	r3, [r8]
 80045c2:	461c      	mov	r4, r3
 80045c4:	bb44      	cbnz	r4, 8004618 <_malloc_r+0x88>
 80045c6:	4629      	mov	r1, r5
 80045c8:	4630      	mov	r0, r6
 80045ca:	f7ff ffbf 	bl	800454c <sbrk_aligned>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	4604      	mov	r4, r0
 80045d2:	d158      	bne.n	8004686 <_malloc_r+0xf6>
 80045d4:	f8d8 4000 	ldr.w	r4, [r8]
 80045d8:	4627      	mov	r7, r4
 80045da:	2f00      	cmp	r7, #0
 80045dc:	d143      	bne.n	8004666 <_malloc_r+0xd6>
 80045de:	2c00      	cmp	r4, #0
 80045e0:	d04b      	beq.n	800467a <_malloc_r+0xea>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	4639      	mov	r1, r7
 80045e6:	4630      	mov	r0, r6
 80045e8:	eb04 0903 	add.w	r9, r4, r3
 80045ec:	f000 fb5c 	bl	8004ca8 <_sbrk_r>
 80045f0:	4581      	cmp	r9, r0
 80045f2:	d142      	bne.n	800467a <_malloc_r+0xea>
 80045f4:	6821      	ldr	r1, [r4, #0]
 80045f6:	1a6d      	subs	r5, r5, r1
 80045f8:	4629      	mov	r1, r5
 80045fa:	4630      	mov	r0, r6
 80045fc:	f7ff ffa6 	bl	800454c <sbrk_aligned>
 8004600:	3001      	adds	r0, #1
 8004602:	d03a      	beq.n	800467a <_malloc_r+0xea>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	442b      	add	r3, r5
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	f8d8 3000 	ldr.w	r3, [r8]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	bb62      	cbnz	r2, 800466c <_malloc_r+0xdc>
 8004612:	f8c8 7000 	str.w	r7, [r8]
 8004616:	e00f      	b.n	8004638 <_malloc_r+0xa8>
 8004618:	6822      	ldr	r2, [r4, #0]
 800461a:	1b52      	subs	r2, r2, r5
 800461c:	d420      	bmi.n	8004660 <_malloc_r+0xd0>
 800461e:	2a0b      	cmp	r2, #11
 8004620:	d917      	bls.n	8004652 <_malloc_r+0xc2>
 8004622:	1961      	adds	r1, r4, r5
 8004624:	42a3      	cmp	r3, r4
 8004626:	6025      	str	r5, [r4, #0]
 8004628:	bf18      	it	ne
 800462a:	6059      	strne	r1, [r3, #4]
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	bf08      	it	eq
 8004630:	f8c8 1000 	streq.w	r1, [r8]
 8004634:	5162      	str	r2, [r4, r5]
 8004636:	604b      	str	r3, [r1, #4]
 8004638:	4630      	mov	r0, r6
 800463a:	f000 f82f 	bl	800469c <__malloc_unlock>
 800463e:	f104 000b 	add.w	r0, r4, #11
 8004642:	1d23      	adds	r3, r4, #4
 8004644:	f020 0007 	bic.w	r0, r0, #7
 8004648:	1ac2      	subs	r2, r0, r3
 800464a:	bf1c      	itt	ne
 800464c:	1a1b      	subne	r3, r3, r0
 800464e:	50a3      	strne	r3, [r4, r2]
 8004650:	e7af      	b.n	80045b2 <_malloc_r+0x22>
 8004652:	6862      	ldr	r2, [r4, #4]
 8004654:	42a3      	cmp	r3, r4
 8004656:	bf0c      	ite	eq
 8004658:	f8c8 2000 	streq.w	r2, [r8]
 800465c:	605a      	strne	r2, [r3, #4]
 800465e:	e7eb      	b.n	8004638 <_malloc_r+0xa8>
 8004660:	4623      	mov	r3, r4
 8004662:	6864      	ldr	r4, [r4, #4]
 8004664:	e7ae      	b.n	80045c4 <_malloc_r+0x34>
 8004666:	463c      	mov	r4, r7
 8004668:	687f      	ldr	r7, [r7, #4]
 800466a:	e7b6      	b.n	80045da <_malloc_r+0x4a>
 800466c:	461a      	mov	r2, r3
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	42a3      	cmp	r3, r4
 8004672:	d1fb      	bne.n	800466c <_malloc_r+0xdc>
 8004674:	2300      	movs	r3, #0
 8004676:	6053      	str	r3, [r2, #4]
 8004678:	e7de      	b.n	8004638 <_malloc_r+0xa8>
 800467a:	230c      	movs	r3, #12
 800467c:	6033      	str	r3, [r6, #0]
 800467e:	4630      	mov	r0, r6
 8004680:	f000 f80c 	bl	800469c <__malloc_unlock>
 8004684:	e794      	b.n	80045b0 <_malloc_r+0x20>
 8004686:	6005      	str	r5, [r0, #0]
 8004688:	e7d6      	b.n	8004638 <_malloc_r+0xa8>
 800468a:	bf00      	nop
 800468c:	200014ec 	.word	0x200014ec

08004690 <__malloc_lock>:
 8004690:	4801      	ldr	r0, [pc, #4]	@ (8004698 <__malloc_lock+0x8>)
 8004692:	f7ff bf01 	b.w	8004498 <__retarget_lock_acquire_recursive>
 8004696:	bf00      	nop
 8004698:	200014e4 	.word	0x200014e4

0800469c <__malloc_unlock>:
 800469c:	4801      	ldr	r0, [pc, #4]	@ (80046a4 <__malloc_unlock+0x8>)
 800469e:	f7ff befc 	b.w	800449a <__retarget_lock_release_recursive>
 80046a2:	bf00      	nop
 80046a4:	200014e4 	.word	0x200014e4

080046a8 <__ssputs_r>:
 80046a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ac:	688e      	ldr	r6, [r1, #8]
 80046ae:	461f      	mov	r7, r3
 80046b0:	42be      	cmp	r6, r7
 80046b2:	680b      	ldr	r3, [r1, #0]
 80046b4:	4682      	mov	sl, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	4690      	mov	r8, r2
 80046ba:	d82d      	bhi.n	8004718 <__ssputs_r+0x70>
 80046bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046c4:	d026      	beq.n	8004714 <__ssputs_r+0x6c>
 80046c6:	6965      	ldr	r5, [r4, #20]
 80046c8:	6909      	ldr	r1, [r1, #16]
 80046ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046ce:	eba3 0901 	sub.w	r9, r3, r1
 80046d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046d6:	1c7b      	adds	r3, r7, #1
 80046d8:	444b      	add	r3, r9
 80046da:	106d      	asrs	r5, r5, #1
 80046dc:	429d      	cmp	r5, r3
 80046de:	bf38      	it	cc
 80046e0:	461d      	movcc	r5, r3
 80046e2:	0553      	lsls	r3, r2, #21
 80046e4:	d527      	bpl.n	8004736 <__ssputs_r+0x8e>
 80046e6:	4629      	mov	r1, r5
 80046e8:	f7ff ff52 	bl	8004590 <_malloc_r>
 80046ec:	4606      	mov	r6, r0
 80046ee:	b360      	cbz	r0, 800474a <__ssputs_r+0xa2>
 80046f0:	6921      	ldr	r1, [r4, #16]
 80046f2:	464a      	mov	r2, r9
 80046f4:	f7ff fed2 	bl	800449c <memcpy>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	6126      	str	r6, [r4, #16]
 8004706:	6165      	str	r5, [r4, #20]
 8004708:	444e      	add	r6, r9
 800470a:	eba5 0509 	sub.w	r5, r5, r9
 800470e:	6026      	str	r6, [r4, #0]
 8004710:	60a5      	str	r5, [r4, #8]
 8004712:	463e      	mov	r6, r7
 8004714:	42be      	cmp	r6, r7
 8004716:	d900      	bls.n	800471a <__ssputs_r+0x72>
 8004718:	463e      	mov	r6, r7
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	4632      	mov	r2, r6
 800471e:	4641      	mov	r1, r8
 8004720:	f000 faa8 	bl	8004c74 <memmove>
 8004724:	68a3      	ldr	r3, [r4, #8]
 8004726:	1b9b      	subs	r3, r3, r6
 8004728:	60a3      	str	r3, [r4, #8]
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	4433      	add	r3, r6
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	2000      	movs	r0, #0
 8004732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004736:	462a      	mov	r2, r5
 8004738:	f000 fac6 	bl	8004cc8 <_realloc_r>
 800473c:	4606      	mov	r6, r0
 800473e:	2800      	cmp	r0, #0
 8004740:	d1e0      	bne.n	8004704 <__ssputs_r+0x5c>
 8004742:	6921      	ldr	r1, [r4, #16]
 8004744:	4650      	mov	r0, sl
 8004746:	f7ff feb7 	bl	80044b8 <_free_r>
 800474a:	230c      	movs	r3, #12
 800474c:	f8ca 3000 	str.w	r3, [sl]
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	e7e9      	b.n	8004732 <__ssputs_r+0x8a>
	...

08004760 <_svfiprintf_r>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	4698      	mov	r8, r3
 8004766:	898b      	ldrh	r3, [r1, #12]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	b09d      	sub	sp, #116	@ 0x74
 800476c:	4607      	mov	r7, r0
 800476e:	460d      	mov	r5, r1
 8004770:	4614      	mov	r4, r2
 8004772:	d510      	bpl.n	8004796 <_svfiprintf_r+0x36>
 8004774:	690b      	ldr	r3, [r1, #16]
 8004776:	b973      	cbnz	r3, 8004796 <_svfiprintf_r+0x36>
 8004778:	2140      	movs	r1, #64	@ 0x40
 800477a:	f7ff ff09 	bl	8004590 <_malloc_r>
 800477e:	6028      	str	r0, [r5, #0]
 8004780:	6128      	str	r0, [r5, #16]
 8004782:	b930      	cbnz	r0, 8004792 <_svfiprintf_r+0x32>
 8004784:	230c      	movs	r3, #12
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	f04f 30ff 	mov.w	r0, #4294967295
 800478c:	b01d      	add	sp, #116	@ 0x74
 800478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004792:	2340      	movs	r3, #64	@ 0x40
 8004794:	616b      	str	r3, [r5, #20]
 8004796:	2300      	movs	r3, #0
 8004798:	9309      	str	r3, [sp, #36]	@ 0x24
 800479a:	2320      	movs	r3, #32
 800479c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80047a4:	2330      	movs	r3, #48	@ 0x30
 80047a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004944 <_svfiprintf_r+0x1e4>
 80047aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047ae:	f04f 0901 	mov.w	r9, #1
 80047b2:	4623      	mov	r3, r4
 80047b4:	469a      	mov	sl, r3
 80047b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ba:	b10a      	cbz	r2, 80047c0 <_svfiprintf_r+0x60>
 80047bc:	2a25      	cmp	r2, #37	@ 0x25
 80047be:	d1f9      	bne.n	80047b4 <_svfiprintf_r+0x54>
 80047c0:	ebba 0b04 	subs.w	fp, sl, r4
 80047c4:	d00b      	beq.n	80047de <_svfiprintf_r+0x7e>
 80047c6:	465b      	mov	r3, fp
 80047c8:	4622      	mov	r2, r4
 80047ca:	4629      	mov	r1, r5
 80047cc:	4638      	mov	r0, r7
 80047ce:	f7ff ff6b 	bl	80046a8 <__ssputs_r>
 80047d2:	3001      	adds	r0, #1
 80047d4:	f000 80a7 	beq.w	8004926 <_svfiprintf_r+0x1c6>
 80047d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047da:	445a      	add	r2, fp
 80047dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80047de:	f89a 3000 	ldrb.w	r3, [sl]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 809f 	beq.w	8004926 <_svfiprintf_r+0x1c6>
 80047e8:	2300      	movs	r3, #0
 80047ea:	f04f 32ff 	mov.w	r2, #4294967295
 80047ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047f2:	f10a 0a01 	add.w	sl, sl, #1
 80047f6:	9304      	str	r3, [sp, #16]
 80047f8:	9307      	str	r3, [sp, #28]
 80047fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004800:	4654      	mov	r4, sl
 8004802:	2205      	movs	r2, #5
 8004804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004808:	484e      	ldr	r0, [pc, #312]	@ (8004944 <_svfiprintf_r+0x1e4>)
 800480a:	f7fb fcf1 	bl	80001f0 <memchr>
 800480e:	9a04      	ldr	r2, [sp, #16]
 8004810:	b9d8      	cbnz	r0, 800484a <_svfiprintf_r+0xea>
 8004812:	06d0      	lsls	r0, r2, #27
 8004814:	bf44      	itt	mi
 8004816:	2320      	movmi	r3, #32
 8004818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800481c:	0711      	lsls	r1, r2, #28
 800481e:	bf44      	itt	mi
 8004820:	232b      	movmi	r3, #43	@ 0x2b
 8004822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004826:	f89a 3000 	ldrb.w	r3, [sl]
 800482a:	2b2a      	cmp	r3, #42	@ 0x2a
 800482c:	d015      	beq.n	800485a <_svfiprintf_r+0xfa>
 800482e:	9a07      	ldr	r2, [sp, #28]
 8004830:	4654      	mov	r4, sl
 8004832:	2000      	movs	r0, #0
 8004834:	f04f 0c0a 	mov.w	ip, #10
 8004838:	4621      	mov	r1, r4
 800483a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800483e:	3b30      	subs	r3, #48	@ 0x30
 8004840:	2b09      	cmp	r3, #9
 8004842:	d94b      	bls.n	80048dc <_svfiprintf_r+0x17c>
 8004844:	b1b0      	cbz	r0, 8004874 <_svfiprintf_r+0x114>
 8004846:	9207      	str	r2, [sp, #28]
 8004848:	e014      	b.n	8004874 <_svfiprintf_r+0x114>
 800484a:	eba0 0308 	sub.w	r3, r0, r8
 800484e:	fa09 f303 	lsl.w	r3, r9, r3
 8004852:	4313      	orrs	r3, r2
 8004854:	9304      	str	r3, [sp, #16]
 8004856:	46a2      	mov	sl, r4
 8004858:	e7d2      	b.n	8004800 <_svfiprintf_r+0xa0>
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	1d19      	adds	r1, r3, #4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	9103      	str	r1, [sp, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	bfbb      	ittet	lt
 8004866:	425b      	neglt	r3, r3
 8004868:	f042 0202 	orrlt.w	r2, r2, #2
 800486c:	9307      	strge	r3, [sp, #28]
 800486e:	9307      	strlt	r3, [sp, #28]
 8004870:	bfb8      	it	lt
 8004872:	9204      	strlt	r2, [sp, #16]
 8004874:	7823      	ldrb	r3, [r4, #0]
 8004876:	2b2e      	cmp	r3, #46	@ 0x2e
 8004878:	d10a      	bne.n	8004890 <_svfiprintf_r+0x130>
 800487a:	7863      	ldrb	r3, [r4, #1]
 800487c:	2b2a      	cmp	r3, #42	@ 0x2a
 800487e:	d132      	bne.n	80048e6 <_svfiprintf_r+0x186>
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	9203      	str	r2, [sp, #12]
 8004888:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800488c:	3402      	adds	r4, #2
 800488e:	9305      	str	r3, [sp, #20]
 8004890:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004954 <_svfiprintf_r+0x1f4>
 8004894:	7821      	ldrb	r1, [r4, #0]
 8004896:	2203      	movs	r2, #3
 8004898:	4650      	mov	r0, sl
 800489a:	f7fb fca9 	bl	80001f0 <memchr>
 800489e:	b138      	cbz	r0, 80048b0 <_svfiprintf_r+0x150>
 80048a0:	9b04      	ldr	r3, [sp, #16]
 80048a2:	eba0 000a 	sub.w	r0, r0, sl
 80048a6:	2240      	movs	r2, #64	@ 0x40
 80048a8:	4082      	lsls	r2, r0
 80048aa:	4313      	orrs	r3, r2
 80048ac:	3401      	adds	r4, #1
 80048ae:	9304      	str	r3, [sp, #16]
 80048b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b4:	4824      	ldr	r0, [pc, #144]	@ (8004948 <_svfiprintf_r+0x1e8>)
 80048b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048ba:	2206      	movs	r2, #6
 80048bc:	f7fb fc98 	bl	80001f0 <memchr>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d036      	beq.n	8004932 <_svfiprintf_r+0x1d2>
 80048c4:	4b21      	ldr	r3, [pc, #132]	@ (800494c <_svfiprintf_r+0x1ec>)
 80048c6:	bb1b      	cbnz	r3, 8004910 <_svfiprintf_r+0x1b0>
 80048c8:	9b03      	ldr	r3, [sp, #12]
 80048ca:	3307      	adds	r3, #7
 80048cc:	f023 0307 	bic.w	r3, r3, #7
 80048d0:	3308      	adds	r3, #8
 80048d2:	9303      	str	r3, [sp, #12]
 80048d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d6:	4433      	add	r3, r6
 80048d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048da:	e76a      	b.n	80047b2 <_svfiprintf_r+0x52>
 80048dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80048e0:	460c      	mov	r4, r1
 80048e2:	2001      	movs	r0, #1
 80048e4:	e7a8      	b.n	8004838 <_svfiprintf_r+0xd8>
 80048e6:	2300      	movs	r3, #0
 80048e8:	3401      	adds	r4, #1
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	4619      	mov	r1, r3
 80048ee:	f04f 0c0a 	mov.w	ip, #10
 80048f2:	4620      	mov	r0, r4
 80048f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f8:	3a30      	subs	r2, #48	@ 0x30
 80048fa:	2a09      	cmp	r2, #9
 80048fc:	d903      	bls.n	8004906 <_svfiprintf_r+0x1a6>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0c6      	beq.n	8004890 <_svfiprintf_r+0x130>
 8004902:	9105      	str	r1, [sp, #20]
 8004904:	e7c4      	b.n	8004890 <_svfiprintf_r+0x130>
 8004906:	fb0c 2101 	mla	r1, ip, r1, r2
 800490a:	4604      	mov	r4, r0
 800490c:	2301      	movs	r3, #1
 800490e:	e7f0      	b.n	80048f2 <_svfiprintf_r+0x192>
 8004910:	ab03      	add	r3, sp, #12
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	462a      	mov	r2, r5
 8004916:	4b0e      	ldr	r3, [pc, #56]	@ (8004950 <_svfiprintf_r+0x1f0>)
 8004918:	a904      	add	r1, sp, #16
 800491a:	4638      	mov	r0, r7
 800491c:	f3af 8000 	nop.w
 8004920:	1c42      	adds	r2, r0, #1
 8004922:	4606      	mov	r6, r0
 8004924:	d1d6      	bne.n	80048d4 <_svfiprintf_r+0x174>
 8004926:	89ab      	ldrh	r3, [r5, #12]
 8004928:	065b      	lsls	r3, r3, #25
 800492a:	f53f af2d 	bmi.w	8004788 <_svfiprintf_r+0x28>
 800492e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004930:	e72c      	b.n	800478c <_svfiprintf_r+0x2c>
 8004932:	ab03      	add	r3, sp, #12
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	462a      	mov	r2, r5
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <_svfiprintf_r+0x1f0>)
 800493a:	a904      	add	r1, sp, #16
 800493c:	4638      	mov	r0, r7
 800493e:	f000 f879 	bl	8004a34 <_printf_i>
 8004942:	e7ed      	b.n	8004920 <_svfiprintf_r+0x1c0>
 8004944:	08005000 	.word	0x08005000
 8004948:	0800500a 	.word	0x0800500a
 800494c:	00000000 	.word	0x00000000
 8004950:	080046a9 	.word	0x080046a9
 8004954:	08005006 	.word	0x08005006

08004958 <_printf_common>:
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	4616      	mov	r6, r2
 800495e:	4698      	mov	r8, r3
 8004960:	688a      	ldr	r2, [r1, #8]
 8004962:	690b      	ldr	r3, [r1, #16]
 8004964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004968:	4293      	cmp	r3, r2
 800496a:	bfb8      	it	lt
 800496c:	4613      	movlt	r3, r2
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004974:	4607      	mov	r7, r0
 8004976:	460c      	mov	r4, r1
 8004978:	b10a      	cbz	r2, 800497e <_printf_common+0x26>
 800497a:	3301      	adds	r3, #1
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	0699      	lsls	r1, r3, #26
 8004982:	bf42      	ittt	mi
 8004984:	6833      	ldrmi	r3, [r6, #0]
 8004986:	3302      	addmi	r3, #2
 8004988:	6033      	strmi	r3, [r6, #0]
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	f015 0506 	ands.w	r5, r5, #6
 8004990:	d106      	bne.n	80049a0 <_printf_common+0x48>
 8004992:	f104 0a19 	add.w	sl, r4, #25
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	6832      	ldr	r2, [r6, #0]
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	42ab      	cmp	r3, r5
 800499e:	dc26      	bgt.n	80049ee <_printf_common+0x96>
 80049a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	3b00      	subs	r3, #0
 80049a8:	bf18      	it	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	0692      	lsls	r2, r2, #26
 80049ae:	d42b      	bmi.n	8004a08 <_printf_common+0xb0>
 80049b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049b4:	4641      	mov	r1, r8
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c8      	blx	r9
 80049ba:	3001      	adds	r0, #1
 80049bc:	d01e      	beq.n	80049fc <_printf_common+0xa4>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	6922      	ldr	r2, [r4, #16]
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	bf02      	ittt	eq
 80049ca:	68e5      	ldreq	r5, [r4, #12]
 80049cc:	6833      	ldreq	r3, [r6, #0]
 80049ce:	1aed      	subeq	r5, r5, r3
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	bf0c      	ite	eq
 80049d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d8:	2500      	movne	r5, #0
 80049da:	4293      	cmp	r3, r2
 80049dc:	bfc4      	itt	gt
 80049de:	1a9b      	subgt	r3, r3, r2
 80049e0:	18ed      	addgt	r5, r5, r3
 80049e2:	2600      	movs	r6, #0
 80049e4:	341a      	adds	r4, #26
 80049e6:	42b5      	cmp	r5, r6
 80049e8:	d11a      	bne.n	8004a20 <_printf_common+0xc8>
 80049ea:	2000      	movs	r0, #0
 80049ec:	e008      	b.n	8004a00 <_printf_common+0xa8>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4652      	mov	r2, sl
 80049f2:	4641      	mov	r1, r8
 80049f4:	4638      	mov	r0, r7
 80049f6:	47c8      	blx	r9
 80049f8:	3001      	adds	r0, #1
 80049fa:	d103      	bne.n	8004a04 <_printf_common+0xac>
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a04:	3501      	adds	r5, #1
 8004a06:	e7c6      	b.n	8004996 <_printf_common+0x3e>
 8004a08:	18e1      	adds	r1, r4, r3
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	2030      	movs	r0, #48	@ 0x30
 8004a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a12:	4422      	add	r2, r4
 8004a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	e7c7      	b.n	80049b0 <_printf_common+0x58>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4622      	mov	r2, r4
 8004a24:	4641      	mov	r1, r8
 8004a26:	4638      	mov	r0, r7
 8004a28:	47c8      	blx	r9
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d0e6      	beq.n	80049fc <_printf_common+0xa4>
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7d9      	b.n	80049e6 <_printf_common+0x8e>
	...

08004a34 <_printf_i>:
 8004a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a38:	7e0f      	ldrb	r7, [r1, #24]
 8004a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a3c:	2f78      	cmp	r7, #120	@ 0x78
 8004a3e:	4691      	mov	r9, r2
 8004a40:	4680      	mov	r8, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	469a      	mov	sl, r3
 8004a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a4a:	d807      	bhi.n	8004a5c <_printf_i+0x28>
 8004a4c:	2f62      	cmp	r7, #98	@ 0x62
 8004a4e:	d80a      	bhi.n	8004a66 <_printf_i+0x32>
 8004a50:	2f00      	cmp	r7, #0
 8004a52:	f000 80d2 	beq.w	8004bfa <_printf_i+0x1c6>
 8004a56:	2f58      	cmp	r7, #88	@ 0x58
 8004a58:	f000 80b9 	beq.w	8004bce <_printf_i+0x19a>
 8004a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a64:	e03a      	b.n	8004adc <_printf_i+0xa8>
 8004a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a6a:	2b15      	cmp	r3, #21
 8004a6c:	d8f6      	bhi.n	8004a5c <_printf_i+0x28>
 8004a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8004a74 <_printf_i+0x40>)
 8004a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004ae1 	.word	0x08004ae1
 8004a7c:	08004a5d 	.word	0x08004a5d
 8004a80:	08004a5d 	.word	0x08004a5d
 8004a84:	08004a5d 	.word	0x08004a5d
 8004a88:	08004a5d 	.word	0x08004a5d
 8004a8c:	08004ae1 	.word	0x08004ae1
 8004a90:	08004a5d 	.word	0x08004a5d
 8004a94:	08004a5d 	.word	0x08004a5d
 8004a98:	08004a5d 	.word	0x08004a5d
 8004a9c:	08004a5d 	.word	0x08004a5d
 8004aa0:	08004be1 	.word	0x08004be1
 8004aa4:	08004b0b 	.word	0x08004b0b
 8004aa8:	08004b9b 	.word	0x08004b9b
 8004aac:	08004a5d 	.word	0x08004a5d
 8004ab0:	08004a5d 	.word	0x08004a5d
 8004ab4:	08004c03 	.word	0x08004c03
 8004ab8:	08004a5d 	.word	0x08004a5d
 8004abc:	08004b0b 	.word	0x08004b0b
 8004ac0:	08004a5d 	.word	0x08004a5d
 8004ac4:	08004a5d 	.word	0x08004a5d
 8004ac8:	08004ba3 	.word	0x08004ba3
 8004acc:	6833      	ldr	r3, [r6, #0]
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6032      	str	r2, [r6, #0]
 8004ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004adc:	2301      	movs	r3, #1
 8004ade:	e09d      	b.n	8004c1c <_printf_i+0x1e8>
 8004ae0:	6833      	ldr	r3, [r6, #0]
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	1d19      	adds	r1, r3, #4
 8004ae6:	6031      	str	r1, [r6, #0]
 8004ae8:	0606      	lsls	r6, r0, #24
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0xbc>
 8004aec:	681d      	ldr	r5, [r3, #0]
 8004aee:	e003      	b.n	8004af8 <_printf_i+0xc4>
 8004af0:	0645      	lsls	r5, r0, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0xb8>
 8004af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	da03      	bge.n	8004b04 <_printf_i+0xd0>
 8004afc:	232d      	movs	r3, #45	@ 0x2d
 8004afe:	426d      	negs	r5, r5
 8004b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b04:	4859      	ldr	r0, [pc, #356]	@ (8004c6c <_printf_i+0x238>)
 8004b06:	230a      	movs	r3, #10
 8004b08:	e011      	b.n	8004b2e <_printf_i+0xfa>
 8004b0a:	6821      	ldr	r1, [r4, #0]
 8004b0c:	6833      	ldr	r3, [r6, #0]
 8004b0e:	0608      	lsls	r0, r1, #24
 8004b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b14:	d402      	bmi.n	8004b1c <_printf_i+0xe8>
 8004b16:	0649      	lsls	r1, r1, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2ad      	uxthmi	r5, r5
 8004b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b1e:	4853      	ldr	r0, [pc, #332]	@ (8004c6c <_printf_i+0x238>)
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	bf14      	ite	ne
 8004b24:	230a      	movne	r3, #10
 8004b26:	2308      	moveq	r3, #8
 8004b28:	2100      	movs	r1, #0
 8004b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b2e:	6866      	ldr	r6, [r4, #4]
 8004b30:	60a6      	str	r6, [r4, #8]
 8004b32:	2e00      	cmp	r6, #0
 8004b34:	bfa2      	ittt	ge
 8004b36:	6821      	ldrge	r1, [r4, #0]
 8004b38:	f021 0104 	bicge.w	r1, r1, #4
 8004b3c:	6021      	strge	r1, [r4, #0]
 8004b3e:	b90d      	cbnz	r5, 8004b44 <_printf_i+0x110>
 8004b40:	2e00      	cmp	r6, #0
 8004b42:	d04b      	beq.n	8004bdc <_printf_i+0x1a8>
 8004b44:	4616      	mov	r6, r2
 8004b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8004b4e:	5dc7      	ldrb	r7, [r0, r7]
 8004b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b54:	462f      	mov	r7, r5
 8004b56:	42bb      	cmp	r3, r7
 8004b58:	460d      	mov	r5, r1
 8004b5a:	d9f4      	bls.n	8004b46 <_printf_i+0x112>
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d10b      	bne.n	8004b78 <_printf_i+0x144>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	07df      	lsls	r7, r3, #31
 8004b64:	d508      	bpl.n	8004b78 <_printf_i+0x144>
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	6861      	ldr	r1, [r4, #4]
 8004b6a:	4299      	cmp	r1, r3
 8004b6c:	bfde      	ittt	le
 8004b6e:	2330      	movle	r3, #48	@ 0x30
 8004b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b78:	1b92      	subs	r2, r2, r6
 8004b7a:	6122      	str	r2, [r4, #16]
 8004b7c:	f8cd a000 	str.w	sl, [sp]
 8004b80:	464b      	mov	r3, r9
 8004b82:	aa03      	add	r2, sp, #12
 8004b84:	4621      	mov	r1, r4
 8004b86:	4640      	mov	r0, r8
 8004b88:	f7ff fee6 	bl	8004958 <_printf_common>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d14a      	bne.n	8004c26 <_printf_i+0x1f2>
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	b004      	add	sp, #16
 8004b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	f043 0320 	orr.w	r3, r3, #32
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	4833      	ldr	r0, [pc, #204]	@ (8004c70 <_printf_i+0x23c>)
 8004ba4:	2778      	movs	r7, #120	@ 0x78
 8004ba6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	6831      	ldr	r1, [r6, #0]
 8004bae:	061f      	lsls	r7, r3, #24
 8004bb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bb4:	d402      	bmi.n	8004bbc <_printf_i+0x188>
 8004bb6:	065f      	lsls	r7, r3, #25
 8004bb8:	bf48      	it	mi
 8004bba:	b2ad      	uxthmi	r5, r5
 8004bbc:	6031      	str	r1, [r6, #0]
 8004bbe:	07d9      	lsls	r1, r3, #31
 8004bc0:	bf44      	itt	mi
 8004bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc6:	6023      	strmi	r3, [r4, #0]
 8004bc8:	b11d      	cbz	r5, 8004bd2 <_printf_i+0x19e>
 8004bca:	2310      	movs	r3, #16
 8004bcc:	e7ac      	b.n	8004b28 <_printf_i+0xf4>
 8004bce:	4827      	ldr	r0, [pc, #156]	@ (8004c6c <_printf_i+0x238>)
 8004bd0:	e7e9      	b.n	8004ba6 <_printf_i+0x172>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	f023 0320 	bic.w	r3, r3, #32
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	e7f6      	b.n	8004bca <_printf_i+0x196>
 8004bdc:	4616      	mov	r6, r2
 8004bde:	e7bd      	b.n	8004b5c <_printf_i+0x128>
 8004be0:	6833      	ldr	r3, [r6, #0]
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	6961      	ldr	r1, [r4, #20]
 8004be6:	1d18      	adds	r0, r3, #4
 8004be8:	6030      	str	r0, [r6, #0]
 8004bea:	062e      	lsls	r6, r5, #24
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	d501      	bpl.n	8004bf4 <_printf_i+0x1c0>
 8004bf0:	6019      	str	r1, [r3, #0]
 8004bf2:	e002      	b.n	8004bfa <_printf_i+0x1c6>
 8004bf4:	0668      	lsls	r0, r5, #25
 8004bf6:	d5fb      	bpl.n	8004bf0 <_printf_i+0x1bc>
 8004bf8:	8019      	strh	r1, [r3, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	4616      	mov	r6, r2
 8004c00:	e7bc      	b.n	8004b7c <_printf_i+0x148>
 8004c02:	6833      	ldr	r3, [r6, #0]
 8004c04:	1d1a      	adds	r2, r3, #4
 8004c06:	6032      	str	r2, [r6, #0]
 8004c08:	681e      	ldr	r6, [r3, #0]
 8004c0a:	6862      	ldr	r2, [r4, #4]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7fb faee 	bl	80001f0 <memchr>
 8004c14:	b108      	cbz	r0, 8004c1a <_printf_i+0x1e6>
 8004c16:	1b80      	subs	r0, r0, r6
 8004c18:	6060      	str	r0, [r4, #4]
 8004c1a:	6863      	ldr	r3, [r4, #4]
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c24:	e7aa      	b.n	8004b7c <_printf_i+0x148>
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	47d0      	blx	sl
 8004c30:	3001      	adds	r0, #1
 8004c32:	d0ad      	beq.n	8004b90 <_printf_i+0x15c>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	079b      	lsls	r3, r3, #30
 8004c38:	d413      	bmi.n	8004c62 <_printf_i+0x22e>
 8004c3a:	68e0      	ldr	r0, [r4, #12]
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	4298      	cmp	r0, r3
 8004c40:	bfb8      	it	lt
 8004c42:	4618      	movlt	r0, r3
 8004c44:	e7a6      	b.n	8004b94 <_printf_i+0x160>
 8004c46:	2301      	movs	r3, #1
 8004c48:	4632      	mov	r2, r6
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	47d0      	blx	sl
 8004c50:	3001      	adds	r0, #1
 8004c52:	d09d      	beq.n	8004b90 <_printf_i+0x15c>
 8004c54:	3501      	adds	r5, #1
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	9903      	ldr	r1, [sp, #12]
 8004c5a:	1a5b      	subs	r3, r3, r1
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	dcf2      	bgt.n	8004c46 <_printf_i+0x212>
 8004c60:	e7eb      	b.n	8004c3a <_printf_i+0x206>
 8004c62:	2500      	movs	r5, #0
 8004c64:	f104 0619 	add.w	r6, r4, #25
 8004c68:	e7f5      	b.n	8004c56 <_printf_i+0x222>
 8004c6a:	bf00      	nop
 8004c6c:	08005011 	.word	0x08005011
 8004c70:	08005022 	.word	0x08005022

08004c74 <memmove>:
 8004c74:	4288      	cmp	r0, r1
 8004c76:	b510      	push	{r4, lr}
 8004c78:	eb01 0402 	add.w	r4, r1, r2
 8004c7c:	d902      	bls.n	8004c84 <memmove+0x10>
 8004c7e:	4284      	cmp	r4, r0
 8004c80:	4623      	mov	r3, r4
 8004c82:	d807      	bhi.n	8004c94 <memmove+0x20>
 8004c84:	1e43      	subs	r3, r0, #1
 8004c86:	42a1      	cmp	r1, r4
 8004c88:	d008      	beq.n	8004c9c <memmove+0x28>
 8004c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c92:	e7f8      	b.n	8004c86 <memmove+0x12>
 8004c94:	4402      	add	r2, r0
 8004c96:	4601      	mov	r1, r0
 8004c98:	428a      	cmp	r2, r1
 8004c9a:	d100      	bne.n	8004c9e <memmove+0x2a>
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ca6:	e7f7      	b.n	8004c98 <memmove+0x24>

08004ca8 <_sbrk_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d06      	ldr	r5, [pc, #24]	@ (8004cc4 <_sbrk_r+0x1c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fc fe26 	bl	8001904 <_sbrk>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_sbrk_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_sbrk_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	200014e0 	.word	0x200014e0

08004cc8 <_realloc_r>:
 8004cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ccc:	4680      	mov	r8, r0
 8004cce:	4615      	mov	r5, r2
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	b921      	cbnz	r1, 8004cde <_realloc_r+0x16>
 8004cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	4611      	mov	r1, r2
 8004cda:	f7ff bc59 	b.w	8004590 <_malloc_r>
 8004cde:	b92a      	cbnz	r2, 8004cec <_realloc_r+0x24>
 8004ce0:	f7ff fbea 	bl	80044b8 <_free_r>
 8004ce4:	2400      	movs	r4, #0
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cec:	f000 f81a 	bl	8004d24 <_malloc_usable_size_r>
 8004cf0:	4285      	cmp	r5, r0
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	d802      	bhi.n	8004cfc <_realloc_r+0x34>
 8004cf6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004cfa:	d8f4      	bhi.n	8004ce6 <_realloc_r+0x1e>
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4640      	mov	r0, r8
 8004d00:	f7ff fc46 	bl	8004590 <_malloc_r>
 8004d04:	4607      	mov	r7, r0
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d0ec      	beq.n	8004ce4 <_realloc_r+0x1c>
 8004d0a:	42b5      	cmp	r5, r6
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4621      	mov	r1, r4
 8004d10:	bf28      	it	cs
 8004d12:	4632      	movcs	r2, r6
 8004d14:	f7ff fbc2 	bl	800449c <memcpy>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	f7ff fbcc 	bl	80044b8 <_free_r>
 8004d20:	463c      	mov	r4, r7
 8004d22:	e7e0      	b.n	8004ce6 <_realloc_r+0x1e>

08004d24 <_malloc_usable_size_r>:
 8004d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d28:	1f18      	subs	r0, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bfbc      	itt	lt
 8004d2e:	580b      	ldrlt	r3, [r1, r0]
 8004d30:	18c0      	addlt	r0, r0, r3
 8004d32:	4770      	bx	lr

08004d34 <_init>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr

08004d40 <_fini>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	bf00      	nop
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr
