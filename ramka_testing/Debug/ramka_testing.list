
ramka_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc8  08003fc8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fc8  08003fc8  00004fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd0  08003fd0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00004fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003fd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a64  2000005c  08004034  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  08004034  00005ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d29a  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da3  00000000  00000000  00012326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000140d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d6  00000000  00000000  00014d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163cf  00000000  00000000  0001572e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3f0  00000000  00000000  0002bafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e25d  00000000  00000000  00039eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c814a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003730  00000000  00000000  000c8190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000cb8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c7c 	.word	0x08003c7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08003c7c 	.word	0x08003c7c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <calculateCRC>:
 */

#include "frame.h"

// Funkcja obliczająca CRC
uint16_t calculateCRC(const uint8_t *data, uint16_t length) {
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	807b      	strh	r3, [r7, #2]
    		0xBBAF, 0xD4CC, 0x6569, 0x0A0A,   0x6940, 0x0623, 0xB786, 0xD8E5,
    		0x8B0B, 0xE468, 0x55CD, 0x3AAE,   0x59E4, 0x3687, 0x8722, 0xE841,
    		0x41B6, 0x2ED5, 0x9F70, 0xF013,   0x9359, 0xFC3A, 0x4D9F, 0x22FC
    };

    uint16_t crc = 0xFFFF; // Początkowa wartość CRC
 80004e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004e8:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < length; i++) {
 80004ea:	2300      	movs	r3, #0
 80004ec:	81bb      	strh	r3, [r7, #12]
 80004ee:	e017      	b.n	8000520 <calculateCRC+0x48>
        uint8_t index = (crc >> 8) ^ data[i]; // XOR bieżącego bajtu z górnymi 8 bitami CRC
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	0a1b      	lsrs	r3, r3, #8
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	89bb      	ldrh	r3, [r7, #12]
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	440b      	add	r3, r1
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4053      	eors	r3, r2
 8000502:	72fb      	strb	r3, [r7, #11]
        crc = (crc << 8) ^ CRC_TABLE[index];  // Aktualizacja CRC
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	b21a      	sxth	r2, r3
 800050a:	7afb      	ldrb	r3, [r7, #11]
 800050c:	490a      	ldr	r1, [pc, #40]	@ (8000538 <calculateCRC+0x60>)
 800050e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000512:	b21b      	sxth	r3, r3
 8000514:	4053      	eors	r3, r2
 8000516:	b21b      	sxth	r3, r3
 8000518:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 800051a:	89bb      	ldrh	r3, [r7, #12]
 800051c:	3301      	adds	r3, #1
 800051e:	81bb      	strh	r3, [r7, #12]
 8000520:	89ba      	ldrh	r2, [r7, #12]
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3e3      	bcc.n	80004f0 <calculateCRC+0x18>
    }

    return crc;
 8000528:	89fb      	ldrh	r3, [r7, #14]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	08003cac 	.word	0x08003cac

0800053c <createFrame>:

// Funkcja tworząca ramkę
uint16_t createFrame(uint8_t *buffer, const Frame *frame) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	81fb      	strh	r3, [r7, #14]

    // Dodaj SYNCHRO_START
    buffer[index++] = SYNCHRO_START;
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	81fa      	strh	r2, [r7, #14]
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	227e      	movs	r2, #126	@ 0x7e
 8000558:	701a      	strb	r2, [r3, #0]

    // Dodaj adres
    buffer[index++] = frame->address;
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	81fa      	strh	r2, [r7, #14]
 8000560:	461a      	mov	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	7812      	ldrb	r2, [r2, #0]
 800056a:	701a      	strb	r2, [r3, #0]

    // Dodaj długość w HEX (MSB, LSB)
    buffer[index++] = (frame->length >> 8) & 0xFF;
 800056c:	89fb      	ldrh	r3, [r7, #14]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	81fa      	strh	r2, [r7, #14]
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->length & 0xFF;
 800057c:	89fb      	ldrh	r3, [r7, #14]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	81fa      	strh	r2, [r7, #14]
 8000582:	461a      	mov	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	7852      	ldrb	r2, [r2, #1]
 800058c:	701a      	strb	r2, [r3, #0]

    // Dodaj dane z byte stuffing
    for (uint16_t i = 0; i < frame->length; i++) {
 800058e:	2300      	movs	r3, #0
 8000590:	81bb      	strh	r3, [r7, #12]
 8000592:	e036      	b.n	8000602 <createFrame+0xc6>
        if (frame->data[i] == SYNCHRO_START || frame->data[i] == SYNCHRO_END || frame->data[i] == ESCAPE_BYTE) {
 8000594:	89bb      	ldrh	r3, [r7, #12]
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	4413      	add	r3, r2
 800059a:	789b      	ldrb	r3, [r3, #2]
 800059c:	2b7e      	cmp	r3, #126	@ 0x7e
 800059e:	d00b      	beq.n	80005b8 <createFrame+0x7c>
 80005a0:	89bb      	ldrh	r3, [r7, #12]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	4413      	add	r3, r2
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	2b7c      	cmp	r3, #124	@ 0x7c
 80005aa:	d005      	beq.n	80005b8 <createFrame+0x7c>
 80005ac:	89bb      	ldrh	r3, [r7, #12]
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	4413      	add	r3, r2
 80005b2:	789b      	ldrb	r3, [r3, #2]
 80005b4:	2b7d      	cmp	r3, #125	@ 0x7d
 80005b6:	d116      	bne.n	80005e6 <createFrame+0xaa>
            buffer[index++] = ESCAPE_BYTE;
 80005b8:	89fb      	ldrh	r3, [r7, #14]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	81fa      	strh	r2, [r7, #14]
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	227d      	movs	r2, #125	@ 0x7d
 80005c6:	701a      	strb	r2, [r3, #0]
            buffer[index++] = frame->data[i] ^ 0x20;
 80005c8:	89bb      	ldrh	r3, [r7, #12]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	789a      	ldrb	r2, [r3, #2]
 80005d0:	89fb      	ldrh	r3, [r7, #14]
 80005d2:	1c59      	adds	r1, r3, #1
 80005d4:	81f9      	strh	r1, [r7, #14]
 80005d6:	4619      	mov	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	440b      	add	r3, r1
 80005dc:	f082 0220 	eor.w	r2, r2, #32
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	701a      	strb	r2, [r3, #0]
 80005e4:	e00a      	b.n	80005fc <createFrame+0xc0>
        } else {
            buffer[index++] = frame->data[i];
 80005e6:	89ba      	ldrh	r2, [r7, #12]
 80005e8:	89fb      	ldrh	r3, [r7, #14]
 80005ea:	1c59      	adds	r1, r3, #1
 80005ec:	81f9      	strh	r1, [r7, #14]
 80005ee:	4619      	mov	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	440b      	add	r3, r1
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	440a      	add	r2, r1
 80005f8:	7892      	ldrb	r2, [r2, #2]
 80005fa:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < frame->length; i++) {
 80005fc:	89bb      	ldrh	r3, [r7, #12]
 80005fe:	3301      	adds	r3, #1
 8000600:	81bb      	strh	r3, [r7, #12]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	461a      	mov	r2, r3
 8000608:	89bb      	ldrh	r3, [r7, #12]
 800060a:	4293      	cmp	r3, r2
 800060c:	d3c2      	bcc.n	8000594 <createFrame+0x58>
        }
    }

    // Oblicz CRC przed byte stuffing
    uint16_t crc = calculateCRC(frame->data, frame->length);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	1c9a      	adds	r2, r3, #2
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	4619      	mov	r1, r3
 8000618:	4610      	mov	r0, r2
 800061a:	f7ff ff5d 	bl	80004d8 <calculateCRC>
 800061e:	4603      	mov	r3, r0
 8000620:	817b      	strh	r3, [r7, #10]

    // Dodaj CRC w Big Endian
    buffer[index++] = (crc >> 8) & 0xFF;
 8000622:	897b      	ldrh	r3, [r7, #10]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29a      	uxth	r2, r3
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	1c59      	adds	r1, r3, #1
 800062c:	81f9      	strh	r1, [r7, #14]
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	440b      	add	r3, r1
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	701a      	strb	r2, [r3, #0]
    buffer[index++] = crc & 0xFF;
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	81fa      	strh	r2, [r7, #14]
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4413      	add	r3, r2
 8000644:	897a      	ldrh	r2, [r7, #10]
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	701a      	strb	r2, [r3, #0]

    // Dodaj SYNCHRO_END
    buffer[index++] = SYNCHRO_END;
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	81fa      	strh	r2, [r7, #14]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	227c      	movs	r2, #124	@ 0x7c
 8000658:	701a      	strb	r2, [r3, #0]

    return index;
 800065a:	89fb      	ldrh	r3, [r7, #14]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <decodeFrame>:



// Funkcja dekodująca ramkę
int decodeFrame(const uint8_t *buffer, uint16_t length, Frame *frame) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	460b      	mov	r3, r1
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	817b      	strh	r3, [r7, #10]
    // Sprawdź znaki synchronizacji
    if (buffer[0] != SYNCHRO_START || buffer[length - 1] != SYNCHRO_END) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b7e      	cmp	r3, #126	@ 0x7e
 8000678:	d106      	bne.n	8000688 <decodeFrame+0x24>
 800067a:	897b      	ldrh	r3, [r7, #10]
 800067c:	3b01      	subs	r3, #1
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b7c      	cmp	r3, #124	@ 0x7c
 8000686:	d002      	beq.n	800068e <decodeFrame+0x2a>
        return -1; // Błąd synchronizacji
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	e060      	b.n	8000750 <decodeFrame+0xec>
    }

    // Odczytaj adres
    frame->address = buffer[1];
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	701a      	strb	r2, [r3, #0]

    // Odczytaj długość danych
    frame->length = buffer[2];
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3302      	adds	r3, #2
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	705a      	strb	r2, [r3, #1]

    // Dekoduj dane z byte stuffing
    uint8_t dataIndex = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 3; i < length - 4; i++) { // Dane do CRC
 80006a6:	2303      	movs	r3, #3
 80006a8:	82bb      	strh	r3, [r7, #20]
 80006aa:	e025      	b.n	80006f8 <decodeFrame+0x94>
        if (buffer[i] == ESCAPE_BYTE) {
 80006ac:	8abb      	ldrh	r3, [r7, #20]
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b7d      	cmp	r3, #125	@ 0x7d
 80006b6:	d111      	bne.n	80006dc <decodeFrame+0x78>
            frame->data[dataIndex++] = buffer[++i] ^ 0x20; // Usuń byte stuffing
 80006b8:	8abb      	ldrh	r3, [r7, #20]
 80006ba:	3301      	adds	r3, #1
 80006bc:	82bb      	strh	r3, [r7, #20]
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	4413      	add	r3, r2
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	1c59      	adds	r1, r3, #1
 80006ca:	75f9      	strb	r1, [r7, #23]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f082 0320 	eor.w	r3, r2, #32
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	440b      	add	r3, r1
 80006d8:	709a      	strb	r2, [r3, #2]
 80006da:	e00a      	b.n	80006f2 <decodeFrame+0x8e>
        } else {
            frame->data[dataIndex++] = buffer[i];
 80006dc:	8abb      	ldrh	r3, [r7, #20]
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	441a      	add	r2, r3
 80006e2:	7dfb      	ldrb	r3, [r7, #23]
 80006e4:	1c59      	adds	r1, r3, #1
 80006e6:	75f9      	strb	r1, [r7, #23]
 80006e8:	4619      	mov	r1, r3
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	440b      	add	r3, r1
 80006f0:	709a      	strb	r2, [r3, #2]
    for (uint16_t i = 3; i < length - 4; i++) { // Dane do CRC
 80006f2:	8abb      	ldrh	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	82bb      	strh	r3, [r7, #20]
 80006f8:	8aba      	ldrh	r2, [r7, #20]
 80006fa:	897b      	ldrh	r3, [r7, #10]
 80006fc:	3b04      	subs	r3, #4
 80006fe:	429a      	cmp	r2, r3
 8000700:	dbd4      	blt.n	80006ac <decodeFrame+0x48>
        }
    }

    // Odczytaj CRC (Big Endian)
    frame->crc = (buffer[length - 3] << 8) | buffer[length - 2];
 8000702:	897b      	ldrh	r3, [r7, #10]
 8000704:	3b03      	subs	r3, #3
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b21a      	sxth	r2, r3
 8000710:	897b      	ldrh	r3, [r7, #10]
 8000712:	3b02      	subs	r3, #2
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	440b      	add	r3, r1
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b21b      	sxth	r3, r3
 800071c:	4313      	orrs	r3, r2
 800071e:	b21b      	sxth	r3, r3
 8000720:	b29a      	uxth	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

    // Oblicz CRC
    uint16_t calculatedCRC = calculateCRC(frame->data, frame->length);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	1c9a      	adds	r2, r3, #2
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	4619      	mov	r1, r3
 8000732:	4610      	mov	r0, r2
 8000734:	f7ff fed0 	bl	80004d8 <calculateCRC>
 8000738:	4603      	mov	r3, r0
 800073a:	827b      	strh	r3, [r7, #18]

    return (calculatedCRC == frame->crc) ? 0 : -2; // Zwróć 0 = OK, -2 = Błąd CRC
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8000742:	8a7a      	ldrh	r2, [r7, #18]
 8000744:	429a      	cmp	r2, r3
 8000746:	d101      	bne.n	800074c <decodeFrame+0xe8>
 8000748:	2300      	movs	r3, #0
 800074a:	e001      	b.n	8000750 <decodeFrame+0xec>
 800074c:	f06f 0301 	mvn.w	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <USART_kbhit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Weryfikacja, czy w buforze są nowe dane
uint8_t USART_kbhit(){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	if(USART_RX_Empty==USART_RX_Busy){
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <USART_kbhit+0x20>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <USART_kbhit+0x24>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d101      	bne.n	800076c <USART_kbhit+0x14>
		return 0;
 8000768:	2300      	movs	r3, #0
 800076a:	e000      	b.n	800076e <USART_kbhit+0x16>
	}else{
		return 1;
 800076c:	2301      	movs	r3, #1
	}
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	200008f8 	.word	0x200008f8
 800077c:	200008fc 	.word	0x200008fc

08000780 <processFrame>:
	  USART_TX_Empty=idx; // Aktualizacja wskaznika
  }
  __enable_irq(); // Włączenie przerwań
}//fsend

int processFrame(uint8_t *buffer, uint16_t length) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b0c4      	sub	sp, #272	@ 0x110
 8000784:	af00      	add	r7, sp, #0
 8000786:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800078a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800078e:	6018      	str	r0, [r3, #0]
 8000790:	460a      	mov	r2, r1
 8000792:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000796:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800079a:	801a      	strh	r2, [r3, #0]
    Frame frame;
    int result = decodeFrame(buffer, length, &frame);
 800079c:	f107 0208 	add.w	r2, r7, #8
 80007a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007a4:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 80007a8:	8819      	ldrh	r1, [r3, #0]
 80007aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	f7ff ff56 	bl	8000664 <decodeFrame>
 80007b8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    if (result == 0) {
 80007bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d106      	bne.n	80007d2 <processFrame+0x52>
        processCommand(&frame);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f887 	bl	80008dc <processCommand>
        return 0; // Sukces
 80007ce:	2300      	movs	r3, #0
 80007d0:	e001      	b.n	80007d6 <processFrame+0x56>
    } else {
        return -1; // Błąd synchronizacji lub CRC
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <HAL_UART_TxCpltCallback>:



// Callback na Wyslanie
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a13      	ldr	r2, [pc, #76]	@ (8000838 <HAL_UART_TxCpltCallback+0x58>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d11e      	bne.n	800082e <HAL_UART_TxCpltCallback+0x4e>
	   if(USART_TX_Empty!=USART_TX_Busy){
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_UART_TxCpltCallback+0x5c>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_UART_TxCpltCallback+0x60>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d018      	beq.n	800082e <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <HAL_UART_TxCpltCallback+0x60>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <HAL_UART_TxCpltCallback+0x64>)
 8000802:	5cd3      	ldrb	r3, [r2, r3]
 8000804:	73fb      	strb	r3, [r7, #15]
		   USART_TX_Busy++;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <HAL_UART_TxCpltCallback+0x60>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3301      	adds	r3, #1
 800080c:	4a0c      	ldr	r2, [pc, #48]	@ (8000840 <HAL_UART_TxCpltCallback+0x60>)
 800080e:	6013      	str	r3, [r2, #0]
		   if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 8000810:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <HAL_UART_TxCpltCallback+0x60>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8000818:	db02      	blt.n	8000820 <HAL_UART_TxCpltCallback+0x40>
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_UART_TxCpltCallback+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000820:	f107 030f 	add.w	r3, r7, #15
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <HAL_UART_TxCpltCallback+0x58>)
 800082a:	f002 f9a8 	bl	8002b7e <HAL_UART_Transmit_IT>
	   }
   }
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000c0 	.word	0x200000c0
 800083c:	200008f0 	.word	0x200008f0
 8000840:	200008f4 	.word	0x200008f4
 8000844:	20000108 	.word	0x20000108

08000848 <sendResponse>:
    HAL_UART_Transmit(&huart2, buffer, frameLength, HAL_MAX_DELAY);
}

*/

void sendResponse(const char *message) {
 8000848:	b580      	push	{r7, lr}
 800084a:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800084e:	af00      	add	r7, sp, #0
 8000850:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8000854:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8000858:	6018      	str	r0, [r3, #0]
    Frame responseFrame;
    responseFrame.address = 'B'; // Adres docelowy
 800085a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800085e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000862:	2242      	movs	r2, #66	@ 0x42
 8000864:	701a      	strb	r2, [r3, #0]
    responseFrame.length = strlen(message);
 8000866:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800086a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	f7ff fcb2 	bl	80001d8 <strlen>
 8000874:	4603      	mov	r3, r0
 8000876:	b2da      	uxtb	r2, r3
 8000878:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800087c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000880:	705a      	strb	r2, [r3, #1]
    memcpy(responseFrame.data, message, responseFrame.length);
 8000882:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8000886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800088a:	785b      	ldrb	r3, [r3, #1]
 800088c:	4619      	mov	r1, r3
 800088e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8000892:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8000896:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800089a:	1c90      	adds	r0, r2, #2
 800089c:	460a      	mov	r2, r1
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	f003 f9de 	bl	8003c60 <memcpy>

    uint8_t buffer[512];
    uint16_t frameLength = createFrame(buffer, &responseFrame);
 80008a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe44 	bl	800053c <createFrame>
 80008b4:	4603      	mov	r3, r0
 80008b6:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e
  /* // Debuguj treść ramki przed wysłaniem
    for (uint16_t i = 0; i < frameLength; i++) {
        USART_fsend("%02X ", buffer[i]);
    }
*/
    HAL_UART_Transmit(&huart2, buffer, frameLength, HAL_MAX_DELAY);
 80008ba:	f8b7 230e 	ldrh.w	r2, [r7, #782]	@ 0x30e
 80008be:	f107 0108 	add.w	r1, r7, #8
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <sendResponse+0x90>)
 80008c8:	f002 f8ce 	bl	8002a68 <HAL_UART_Transmit>
}
 80008cc:	bf00      	nop
 80008ce:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000c0 	.word	0x200000c0

080008dc <processCommand>:

void processCommand(Frame *frame) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80008e8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80008ec:	6018      	str	r0, [r3, #0]
    if (frame->length < 3) {
 80008ee:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80008f2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d803      	bhi.n	8000906 <processCommand+0x2a>
        sendResponse("FAL");
 80008fe:	483d      	ldr	r0, [pc, #244]	@ (80009f4 <processCommand+0x118>)
 8000900:	f7ff ffa2 	bl	8000848 <sendResponse>
        return;
 8000904:	e071      	b.n	80009ea <processCommand+0x10e>
    }

    if (memcmp(frame->data, "GET", 3) == 0) {
 8000906:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800090a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3302      	adds	r3, #2
 8000912:	2203      	movs	r2, #3
 8000914:	4938      	ldr	r1, [pc, #224]	@ (80009f8 <processCommand+0x11c>)
 8000916:	4618      	mov	r0, r3
 8000918:	f003 f960 	bl	8003bdc <memcmp>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d14b      	bne.n	80009ba <processCommand+0xde>
        uint16_t requestedCount = atoi((char *)&frame->data[3]);
 8000922:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8000926:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3305      	adds	r3, #5
 800092e:	4618      	mov	r0, r3
 8000930:	f003 f8cc 	bl	8003acc <atoi>
 8000934:	4603      	mov	r3, r0
 8000936:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e
        if (requestedCount > sensorIndex) {
 800093a:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <processCommand+0x120>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	f8b7 230e 	ldrh.w	r2, [r7, #782]	@ 0x30e
 8000942:	429a      	cmp	r2, r3
 8000944:	d903      	bls.n	800094e <processCommand+0x72>
            sendResponse("TMC"); // Za dużo danych
 8000946:	482e      	ldr	r0, [pc, #184]	@ (8000a00 <processCommand+0x124>)
 8000948:	f7ff ff7e 	bl	8000848 <sendResponse>
 800094c:	e04d      	b.n	80009ea <processCommand+0x10e>
        } else {
            Frame dataFrame;
            dataFrame.address = 'B';
 800094e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8000952:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8000956:	2242      	movs	r2, #66	@ 0x42
 8000958:	701a      	strb	r2, [r3, #0]
            dataFrame.length = requestedCount;
 800095a:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 800095e:	b2da      	uxtb	r2, r3
 8000960:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8000964:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8000968:	705a      	strb	r2, [r3, #1]
            memcpy(dataFrame.data, &sensorBuffer[sensorIndex - requestedCount], requestedCount);
 800096a:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <processCommand+0x120>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4a23      	ldr	r2, [pc, #140]	@ (8000a04 <processCommand+0x128>)
 8000978:	1899      	adds	r1, r3, r2
 800097a:	f8b7 230e 	ldrh.w	r2, [r7, #782]	@ 0x30e
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	3302      	adds	r3, #2
 8000984:	4618      	mov	r0, r3
 8000986:	f003 f96b 	bl	8003c60 <memcpy>

            uint8_t buffer[512];
            uint16_t frameLength = createFrame(buffer, &dataFrame);
 800098a:	f107 0208 	add.w	r2, r7, #8
 800098e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fdd1 	bl	800053c <createFrame>
 800099a:	4603      	mov	r3, r0
 800099c:	f8a7 330c 	strh.w	r3, [r7, #780]	@ 0x30c
            HAL_UART_Transmit(&huart2, buffer, frameLength, HAL_MAX_DELAY);
 80009a0:	f8b7 230c 	ldrh.w	r2, [r7, #780]	@ 0x30c
 80009a4:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <processCommand+0x12c>)
 80009ae:	f002 f85b 	bl	8002a68 <HAL_UART_Transmit>

            sendResponse("CPL"); // Completed
 80009b2:	4816      	ldr	r0, [pc, #88]	@ (8000a0c <processCommand+0x130>)
 80009b4:	f7ff ff48 	bl	8000848 <sendResponse>
 80009b8:	e017      	b.n	80009ea <processCommand+0x10e>
        }
    } else if (memcmp(frame->data, "LIVEG", 5) == 0) {
 80009ba:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80009be:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3302      	adds	r3, #2
 80009c6:	2205      	movs	r2, #5
 80009c8:	4911      	ldr	r1, [pc, #68]	@ (8000a10 <processCommand+0x134>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 f906 	bl	8003bdc <memcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d106      	bne.n	80009e4 <processCommand+0x108>
        liveModeEnabled = 1;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <processCommand+0x138>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
        sendResponse("CPL"); // Completed
 80009dc:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <processCommand+0x130>)
 80009de:	f7ff ff33 	bl	8000848 <sendResponse>
 80009e2:	e002      	b.n	80009ea <processCommand+0x10e>
    } else {
        sendResponse("FAL"); // Nieprawidłowa komenda
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <processCommand+0x118>)
 80009e6:	f7ff ff2f 	bl	8000848 <sendResponse>
    }
}
 80009ea:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	08003c94 	.word	0x08003c94
 80009f8:	08003c98 	.word	0x08003c98
 80009fc:	20000980 	.word	0x20000980
 8000a00:	08003c9c 	.word	0x08003c9c
 8000a04:	20000900 	.word	0x20000900
 8000a08:	200000c0 	.word	0x200000c0
 8000a0c:	08003ca0 	.word	0x08003ca0
 8000a10:	08003ca4 	.word	0x08003ca4
 8000a14:	20000982 	.word	0x20000982

08000a18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <HAL_UART_RxCpltCallback+0x44>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d115      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x3c>
		 USART_RX_Empty++;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <HAL_UART_RxCpltCallback+0x48>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <HAL_UART_RxCpltCallback+0x48>)
 8000a30:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Empty>=USART_RXBUF_LEN)USART_RX_Empty=0; // Zawijanie wskaznika
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_UART_RxCpltCallback+0x48>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a3a:	db02      	blt.n	8000a42 <HAL_UART_RxCpltCallback+0x2a>
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_UART_RxCpltCallback+0x48>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1); // Kontynuacja odbioru
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <HAL_UART_RxCpltCallback+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <HAL_UART_RxCpltCallback+0x4c>)
 8000a48:	4413      	add	r3, r2
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <HAL_UART_RxCpltCallback+0x44>)
 8000a50:	f002 f8cb 	bl	8002bea <HAL_UART_Receive_IT>

	 }
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000c0 	.word	0x200000c0
 8000a60:	200008f8 	.word	0x200008f8
 8000a64:	200006f0 	.word	0x200006f0

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a70:	f000 fb36 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a74:	f000 f8d8 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f000 f9b4 	bl	8000de4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a7c:	f000 f932 	bl	8000ce4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000a80:	f000 f986 	bl	8000d90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 8000a84:	4b63      	ldr	r3, [pc, #396]	@ (8000c14 <main+0x1ac>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a63      	ldr	r2, [pc, #396]	@ (8000c18 <main+0x1b0>)
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4862      	ldr	r0, [pc, #392]	@ (8000c1c <main+0x1b4>)
 8000a92:	f002 f8aa 	bl	8002bea <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  	while (1) {
	      // Sprawdzamy, czy w buforze są nowe dane
	      if (USART_kbhit()) {
 8000a96:	f7ff fe5f 	bl	8000758 <USART_kbhit>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0fa      	beq.n	8000a96 <main+0x2e>
	          // Obliczamy długość nowych danych w buforze kołowym
	          uint16_t dataLen;
	          if (USART_RX_Empty >= USART_RX_Busy)
 8000aa0:	4b5c      	ldr	r3, [pc, #368]	@ (8000c14 <main+0x1ac>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8000c20 <main+0x1b8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	db09      	blt.n	8000ac0 <main+0x58>
	              dataLen = USART_RX_Empty - USART_RX_Busy;
 8000aac:	4b59      	ldr	r3, [pc, #356]	@ (8000c14 <main+0x1ac>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8000c20 <main+0x1b8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 8000abe:	e00b      	b.n	8000ad8 <main+0x70>
	          else
	              dataLen = (USART_RXBUF_LEN - USART_RX_Busy) + USART_RX_Empty;
 8000ac0:	4b54      	ldr	r3, [pc, #336]	@ (8000c14 <main+0x1ac>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	4b56      	ldr	r3, [pc, #344]	@ (8000c20 <main+0x1b8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ad4:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e

	          // Kopiujemy nowe dane do tymczasowego bufora
	          uint8_t tempBuffer[512];
	          uint16_t j = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
	          uint16_t i = USART_RX_Busy;
 8000ade:	4b50      	ldr	r3, [pc, #320]	@ (8000c20 <main+0x1b8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
	          while (j < dataLen) {
 8000ae6:	e01a      	b.n	8000b1e <main+0xb6>
	              tempBuffer[j++] = USART_RxBuf[i];
 8000ae8:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 8000aec:	f8b7 320c 	ldrh.w	r3, [r7, #524]	@ 0x20c
 8000af0:	1c59      	adds	r1, r3, #1
 8000af2:	f8a7 120c 	strh.w	r1, [r7, #524]	@ 0x20c
 8000af6:	4619      	mov	r1, r3
 8000af8:	4b47      	ldr	r3, [pc, #284]	@ (8000c18 <main+0x1b0>)
 8000afa:	5c9a      	ldrb	r2, [r3, r2]
 8000afc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000b00:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000b04:	545a      	strb	r2, [r3, r1]
	              i = (i + 1) % USART_RXBUF_LEN;
 8000b06:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	425a      	negs	r2, r3
 8000b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b16:	bf58      	it	pl
 8000b18:	4253      	negpl	r3, r2
 8000b1a:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
	          while (j < dataLen) {
 8000b1e:	f8b7 220c 	ldrh.w	r2, [r7, #524]	@ 0x20c
 8000b22:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d3de      	bcc.n	8000ae8 <main+0x80>
	          }

	          // Szukamy początku i końca ramki w tempBuffer
	          int16_t frameStart = -1, frameEnd = -1;
 8000b2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b2e:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208
 8000b32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b36:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
	          for (i = 0; i < dataLen; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 8000b40:	e012      	b.n	8000b68 <main+0x100>
	              if (tempBuffer[i] == SYNCHRO_START) {
 8000b42:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000b46:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000b4a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	2b7e      	cmp	r3, #126	@ 0x7e
 8000b52:	d104      	bne.n	8000b5e <main+0xf6>
	                  frameStart = i;
 8000b54:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000b58:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208
	                  break;
 8000b5c:	e00a      	b.n	8000b74 <main+0x10c>
	          for (i = 0; i < dataLen; i++) {
 8000b5e:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000b62:	3301      	adds	r3, #1
 8000b64:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 8000b68:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 8000b6c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d3e6      	bcc.n	8000b42 <main+0xda>
	              }
	          }
	          if (frameStart >= 0) {
 8000b74:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	@ 0x208
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db1d      	blt.n	8000bb8 <main+0x150>
	              for (i = frameStart; i < dataLen; i++) {
 8000b7c:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 8000b80:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 8000b84:	e012      	b.n	8000bac <main+0x144>
	                  if (tempBuffer[i] == SYNCHRO_END) {
 8000b86:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000b8a:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8000b8e:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8000b92:	5cd3      	ldrb	r3, [r2, r3]
 8000b94:	2b7c      	cmp	r3, #124	@ 0x7c
 8000b96:	d104      	bne.n	8000ba2 <main+0x13a>
	                      frameEnd = i;
 8000b98:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000b9c:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
	                      break;
 8000ba0:	e00a      	b.n	8000bb8 <main+0x150>
	              for (i = frameStart; i < dataLen; i++) {
 8000ba2:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
 8000bac:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 8000bb0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3e6      	bcc.n	8000b86 <main+0x11e>
	                  }
	              }
	          }

	          if (frameStart >= 0 && frameEnd >= 0 && frameEnd > frameStart) {
 8000bb8:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	@ 0x208
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f6ff af6a 	blt.w	8000a96 <main+0x2e>
 8000bc2:	f9b7 3206 	ldrsh.w	r3, [r7, #518]	@ 0x206
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f6ff af65 	blt.w	8000a96 <main+0x2e>
 8000bcc:	f9b7 2206 	ldrsh.w	r2, [r7, #518]	@ 0x206
 8000bd0:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	@ 0x208
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f77f af5e 	ble.w	8000a96 <main+0x2e>
	              // Znaleziono kompletną ramkę – wywołaj processFrame
	              int status = processFrame(&tempBuffer[frameStart], frameEnd - frameStart + 1);
 8000bda:	f9b7 3208 	ldrsh.w	r3, [r7, #520]	@ 0x208
 8000bde:	463a      	mov	r2, r7
 8000be0:	18d0      	adds	r0, r2, r3
 8000be2:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 8000be6:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f7ff fdc4 	bl	8000780 <processFrame>
 8000bf8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
	              if (status < 0) {
 8000bfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	da02      	bge.n	8000c0a <main+0x1a2>
	                  sendResponse("FAL"); // Błąd ramki (np. CRC lub synchronizacja)
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <main+0x1bc>)
 8000c06:	f7ff fe1f 	bl	8000848 <sendResponse>
	              }
	              // Po przetworzeniu, ustaw wskaźnik odczytu na miejsce, gdzie zakończyły się przetworzone dane
	              // (tutaj uproszczamy, zakładając, że cała zawartość bufora została przetworzona)
	              USART_RX_Busy = USART_RX_Empty;
 8000c0a:	4b02      	ldr	r3, [pc, #8]	@ (8000c14 <main+0x1ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <main+0x1b8>)
 8000c10:	6013      	str	r3, [r2, #0]
	      if (USART_kbhit()) {
 8000c12:	e740      	b.n	8000a96 <main+0x2e>
 8000c14:	200008f8 	.word	0x200008f8
 8000c18:	200006f0 	.word	0x200006f0
 8000c1c:	200000c0 	.word	0x200000c0
 8000c20:	200008fc 	.word	0x200008fc
 8000c24:	08003c94 	.word	0x08003c94

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	@ 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	2230      	movs	r2, #48	@ 0x30
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 ffe0 	bl	8003bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <SystemClock_Config+0xb4>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <SystemClock_Config+0xb4>)
 8000c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <SystemClock_Config+0xb4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <SystemClock_Config+0xb8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce0 <SystemClock_Config+0xb8>)
 8000c72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <SystemClock_Config+0xb8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fdd5 	bl	8001848 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ca4:	f000 f8f8 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	230f      	movs	r3, #15
 8000caa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f838 	bl	8001d38 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cce:	f000 f8e3 	bl	8000e98 <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	@ 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d10:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000d14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000d30:	4816      	ldr	r0, [pc, #88]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d32:	f001 f9e1 	bl	80020f8 <HAL_TIM_OC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d3c:	f000 f8ac 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480f      	ldr	r0, [pc, #60]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d50:	f001 fdb8 	bl	80028c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d5a:	f000 f89d 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	220c      	movs	r2, #12
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_TIM2_Init+0xa8>)
 8000d76:	f001 faff 	bl	8002378 <HAL_TIM_OC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d80:	f000 f88a 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	@ 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000078 	.word	0x20000078

08000d90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <MX_USART2_UART_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f001 fdfe 	bl	80029c8 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f000 f861 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000c0 	.word	0x200000c0
 8000de0:	40004400 	.word	0x40004400

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <MX_GPIO_Init+0xa8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <MX_GPIO_Init+0xa8>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <MX_GPIO_Init+0xa8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_GPIO_Init+0xa8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <MX_GPIO_Init+0xa8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_GPIO_Init+0xa8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e38:	4815      	ldr	r0, [pc, #84]	@ (8000e90 <MX_GPIO_Init+0xac>)
 8000e3a:	f000 fceb 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2120      	movs	r1, #32
 8000e42:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <MX_GPIO_Init+0xb0>)
 8000e44:	f000 fce6 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480b      	ldr	r0, [pc, #44]	@ (8000e90 <MX_GPIO_Init+0xac>)
 8000e62:	f000 fb53 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e66:	2320      	movs	r3, #32
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_GPIO_Init+0xb0>)
 8000e7e:	f000 fb45 	bl	800150c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020000 	.word	0x40020000

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <Error_Handler+0x8>

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a08      	ldr	r2, [pc, #32]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f04:	d115      	bne.n	8000f32 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <HAL_TIM_OC_MspInit+0x48>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f3c <HAL_TIM_OC_MspInit+0x48>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_TIM_OC_MspInit+0x48>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	201c      	movs	r0, #28
 8000f28:	f000 fa27 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f2c:	201c      	movs	r0, #28
 8000f2e:	f000 fa40 	bl	80013b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_UART_MspInit+0x94>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d133      	bne.n	8000fca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_UART_MspInit+0x98>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000faa:	2307      	movs	r3, #7
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <HAL_UART_MspInit+0x9c>)
 8000fb6:	f000 faa9 	bl	800150c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2026      	movs	r0, #38	@ 0x26
 8000fc0:	f000 f9db 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fc4:	2026      	movs	r0, #38	@ 0x26
 8000fc6:	f000 f9f4 	bl	80013b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001036:	f000 f8a5 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <TIM2_IRQHandler+0x10>)
 8001046:	f001 f8a6 	bl	8002196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000078 	.word	0x20000078

08001054 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <USART2_IRQHandler+0x10>)
 800105a:	f001 fdeb 	bl	8002c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000c0 	.word	0x200000c0

08001068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001090:	f7ff ffea 	bl	8001068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	@ (80010d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f002 fdad 	bl	8003c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fcd3 	bl	8000a68 <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010d0:	08003fd8 	.word	0x08003fd8
  ldr r2, =_sbss
 80010d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010d8:	20000ac0 	.word	0x20000ac0

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <HAL_Init+0x40>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <HAL_Init+0x40>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	@ (8001120 <HAL_Init+0x40>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f92b 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fec6 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023c00 	.word	0x40023c00

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f943 	bl	80013ce <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f90b 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000008 	.word	0x20000008
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000984 	.word	0x20000984

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000984 	.word	0x20000984

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4907      	ldr	r1, [pc, #28]	@ (8001260 <__NVIC_EnableIRQ+0x38>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	@ (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	@ (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	@ 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff29 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff3e 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff31 	bl	8001228 <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffa2 	bl	8001320 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff feda 	bl	80011ac <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d008      	beq.n	8001418 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e052      	b.n	80014be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0216 	bic.w	r2, r2, #22
 8001426:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001436:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d103      	bne.n	8001448 <HAL_DMA_Abort+0x62>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0208 	bic.w	r2, r2, #8
 8001456:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001468:	e013      	b.n	8001492 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800146a:	f7ff fe9f 	bl	80011ac <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b05      	cmp	r3, #5
 8001476:	d90c      	bls.n	8001492 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e015      	b.n	80014be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1e4      	bne.n	800146a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	223f      	movs	r2, #63	@ 0x3f
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d004      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2280      	movs	r2, #128	@ 0x80
 80014de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e00c      	b.n	80014fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2205      	movs	r2, #5
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	@ 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	e159      	b.n	80017dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8148 	bne.w	80017d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d005      	beq.n	800155e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155a:	2b02      	cmp	r3, #2
 800155c:	d130      	bne.n	80015c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001594:	2201      	movs	r2, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f003 0201 	and.w	r2, r3, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d017      	beq.n	80015fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d123      	bne.n	8001650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	08da      	lsrs	r2, r3, #3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3208      	adds	r2, #8
 8001610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	69b9      	ldr	r1, [r7, #24]
 800164c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a2 	beq.w	80017d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b57      	ldr	r3, [pc, #348]	@ (80017f4 <HAL_GPIO_Init+0x2e8>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	4a56      	ldr	r2, [pc, #344]	@ (80017f4 <HAL_GPIO_Init+0x2e8>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a2:	4b54      	ldr	r3, [pc, #336]	@ (80017f4 <HAL_GPIO_Init+0x2e8>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ae:	4a52      	ldr	r2, [pc, #328]	@ (80017f8 <HAL_GPIO_Init+0x2ec>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a49      	ldr	r2, [pc, #292]	@ (80017fc <HAL_GPIO_Init+0x2f0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x202>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a48      	ldr	r2, [pc, #288]	@ (8001800 <HAL_GPIO_Init+0x2f4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x1fe>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a47      	ldr	r2, [pc, #284]	@ (8001804 <HAL_GPIO_Init+0x2f8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x1fa>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a46      	ldr	r2, [pc, #280]	@ (8001808 <HAL_GPIO_Init+0x2fc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x1f6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a45      	ldr	r2, [pc, #276]	@ (800180c <HAL_GPIO_Init+0x300>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x1f2>
 80016fa:	2304      	movs	r3, #4
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x204>
 80016fe:	2307      	movs	r3, #7
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x204>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x204>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x204>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x204>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4935      	ldr	r1, [pc, #212]	@ (80017f8 <HAL_GPIO_Init+0x2ec>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	4b38      	ldr	r3, [pc, #224]	@ (8001810 <HAL_GPIO_Init+0x304>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001752:	4a2f      	ldr	r2, [pc, #188]	@ (8001810 <HAL_GPIO_Init+0x304>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001758:	4b2d      	ldr	r3, [pc, #180]	@ (8001810 <HAL_GPIO_Init+0x304>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800177c:	4a24      	ldr	r2, [pc, #144]	@ (8001810 <HAL_GPIO_Init+0x304>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001782:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <HAL_GPIO_Init+0x304>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001810 <HAL_GPIO_Init+0x304>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ac:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <HAL_GPIO_Init+0x304>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001810 <HAL_GPIO_Init+0x304>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f aea2 	bls.w	8001528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3724      	adds	r7, #36	@ 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40013c00 	.word	0x40013c00

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	619a      	str	r2, [r3, #24]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e267      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d075      	beq.n	8001952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001866:	4b88      	ldr	r3, [pc, #544]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d00c      	beq.n	800188c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001872:	4b85      	ldr	r3, [pc, #532]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800187a:	2b08      	cmp	r3, #8
 800187c:	d112      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4b82      	ldr	r3, [pc, #520]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800188a:	d10b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4b7e      	ldr	r3, [pc, #504]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d05b      	beq.n	8001950 <HAL_RCC_OscConfig+0x108>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d157      	bne.n	8001950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e242      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x74>
 80018ae:	4b76      	ldr	r3, [pc, #472]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a75      	ldr	r2, [pc, #468]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xb0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x98>
 80018c6:	4b70      	ldr	r3, [pc, #448]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6c      	ldr	r2, [pc, #432]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xb0>
 80018e0:	4b69      	ldr	r3, [pc, #420]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a68      	ldr	r2, [pc, #416]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b66      	ldr	r3, [pc, #408]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a65      	ldr	r2, [pc, #404]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fc54 	bl	80011ac <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fc50 	bl	80011ac <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e207      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xc0>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fc40 	bl	80011ac <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fc3c 	bl	80011ac <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1f3      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0xe8>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800195e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196a:	4b47      	ldr	r3, [pc, #284]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001972:	2b08      	cmp	r3, #8
 8001974:	d11c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001976:	4b44      	ldr	r3, [pc, #272]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d116      	bne.n	80019b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	4b41      	ldr	r3, [pc, #260]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_RCC_OscConfig+0x152>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e1c7      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4937      	ldr	r1, [pc, #220]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	e03a      	b.n	8001a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b8:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <HAL_RCC_OscConfig+0x244>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff fbf5 	bl	80011ac <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff fbf1 	bl	80011ac <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e1a8      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b28      	ldr	r3, [pc, #160]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4925      	ldr	r1, [pc, #148]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fa:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <HAL_RCC_OscConfig+0x244>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fbd4 	bl	80011ac <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff fbd0 	bl	80011ac <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e187      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d036      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d016      	beq.n	8001a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_RCC_OscConfig+0x248>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff fbb4 	bl	80011ac <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fbb0 	bl	80011ac <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e167      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x200>
 8001a66:	e01b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_OscConfig+0x248>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb9d 	bl	80011ac <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	e00e      	b.n	8001a94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a76:	f7ff fb99 	bl	80011ac <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d907      	bls.n	8001a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e150      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	42470000 	.word	0x42470000
 8001a90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ea      	bne.n	8001a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8097 	beq.w	8001bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b81      	ldr	r3, [pc, #516]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ace:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b77      	ldr	r3, [pc, #476]	@ (8001cbc <HAL_RCC_OscConfig+0x474>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d118      	bne.n	8001b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b74      	ldr	r3, [pc, #464]	@ (8001cbc <HAL_RCC_OscConfig+0x474>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a73      	ldr	r2, [pc, #460]	@ (8001cbc <HAL_RCC_OscConfig+0x474>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb59 	bl	80011ac <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afe:	f7ff fb55 	bl	80011ac <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e10c      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	4b6a      	ldr	r3, [pc, #424]	@ (8001cbc <HAL_RCC_OscConfig+0x474>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x2ea>
 8001b24:	4b64      	ldr	r3, [pc, #400]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b28:	4a63      	ldr	r2, [pc, #396]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b30:	e01c      	b.n	8001b6c <HAL_RCC_OscConfig+0x324>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x30c>
 8001b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b46:	4b5c      	ldr	r3, [pc, #368]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0x324>
 8001b54:	4b58      	ldr	r3, [pc, #352]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b58:	4a57      	ldr	r2, [pc, #348]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b60:	4b55      	ldr	r3, [pc, #340]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b64:	4a54      	ldr	r2, [pc, #336]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b66:	f023 0304 	bic.w	r3, r3, #4
 8001b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff fb1a 	bl	80011ac <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fb16 	bl	80011ac <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0cb      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	4b49      	ldr	r3, [pc, #292]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0ee      	beq.n	8001b7c <HAL_RCC_OscConfig+0x334>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fb04 	bl	80011ac <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fb00 	bl	80011ac <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0b5      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ee      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b39      	ldr	r3, [pc, #228]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	4a38      	ldr	r2, [pc, #224]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a1 	beq.w	8001d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001be6:	4b34      	ldr	r3, [pc, #208]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d05c      	beq.n	8001cac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d141      	bne.n	8001c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <HAL_RCC_OscConfig+0x478>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fad4 	bl	80011ac <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff fad0 	bl	80011ac <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e087      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	085b      	lsrs	r3, r3, #1
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	491b      	ldr	r1, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_RCC_OscConfig+0x478>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff faa9 	bl	80011ac <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff faa5 	bl	80011ac <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e05c      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x416>
 8001c7c:	e054      	b.n	8001d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_OscConfig+0x478>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fa92 	bl	80011ac <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff fa8e 	bl	80011ac <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e045      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x444>
 8001caa:	e03d      	b.n	8001d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e038      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_RCC_OscConfig+0x4ec>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d028      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d121      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d11a      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d111      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800

08001d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0cc      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b68      	ldr	r3, [pc, #416]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d90c      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b65      	ldr	r3, [pc, #404]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b63      	ldr	r3, [pc, #396]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0b8      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d8c:	4b59      	ldr	r3, [pc, #356]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a58      	ldr	r2, [pc, #352]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da4:	4b53      	ldr	r3, [pc, #332]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a52      	ldr	r2, [pc, #328]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b50      	ldr	r3, [pc, #320]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	494d      	ldr	r1, [pc, #308]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d044      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b47      	ldr	r3, [pc, #284]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d119      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e07f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e06f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e06:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e067      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e16:	4b37      	ldr	r3, [pc, #220]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f023 0203 	bic.w	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4934      	ldr	r1, [pc, #208]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e28:	f7ff f9c0 	bl	80011ac <HAL_GetTick>
 8001e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f7ff f9bc 	bl	80011ac <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e04f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 020c 	and.w	r2, r3, #12
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d1eb      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e58:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d20c      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e032      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4916      	ldr	r1, [pc, #88]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eaa:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	490e      	ldr	r1, [pc, #56]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ebe:	f000 f821 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	490a      	ldr	r1, [pc, #40]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	5ccb      	ldrb	r3, [r1, r3]
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	4a09      	ldr	r2, [pc, #36]	@ (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001eda:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <HAL_RCC_ClockConfig+0x1c8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff f920 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023c00 	.word	0x40023c00
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08003eac 	.word	0x08003eac
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f08:	b090      	sub	sp, #64	@ 0x40
 8001f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f1c:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d00d      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x40>
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	f200 80a1 	bhi.w	8002070 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x34>
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f36:	e09b      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f38:	4b53      	ldr	r3, [pc, #332]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f3c:	e09b      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f3e:	4b53      	ldr	r3, [pc, #332]	@ (800208c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f42:	e098      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f44:	4b4f      	ldr	r3, [pc, #316]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d028      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	099b      	lsrs	r3, r3, #6
 8001f60:	2200      	movs	r2, #0
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4b47      	ldr	r3, [pc, #284]	@ (800208c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f70:	fb03 f201 	mul.w	r2, r3, r1
 8001f74:	2300      	movs	r3, #0
 8001f76:	fb00 f303 	mul.w	r3, r0, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a43      	ldr	r2, [pc, #268]	@ (800208c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f7e:	fba0 1202 	umull	r1, r2, r0, r2
 8001f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f84:	460a      	mov	r2, r1
 8001f86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f8a:	4413      	add	r3, r2
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f90:	2200      	movs	r2, #0
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	61fa      	str	r2, [r7, #28]
 8001f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f9e:	f7fe f923 	bl	80001e8 <__aeabi_uldivmod>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001faa:	e053      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fac:	4b35      	ldr	r3, [pc, #212]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	617a      	str	r2, [r7, #20]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fbe:	f04f 0b00 	mov.w	fp, #0
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	465b      	mov	r3, fp
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	0159      	lsls	r1, r3, #5
 8001fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd4:	0150      	lsls	r0, r2, #5
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	ebb2 080a 	subs.w	r8, r2, sl
 8001fde:	eb63 090b 	sbc.w	r9, r3, fp
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ff2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ff6:	ebb2 0408 	subs.w	r4, r2, r8
 8001ffa:	eb63 0509 	sbc.w	r5, r3, r9
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	00eb      	lsls	r3, r5, #3
 8002008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800200c:	00e2      	lsls	r2, r4, #3
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	eb14 030a 	adds.w	r3, r4, sl
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	eb45 030b 	adc.w	r3, r5, fp
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800202a:	4629      	mov	r1, r5
 800202c:	028b      	lsls	r3, r1, #10
 800202e:	4621      	mov	r1, r4
 8002030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002034:	4621      	mov	r1, r4
 8002036:	028a      	lsls	r2, r1, #10
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203e:	2200      	movs	r2, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002048:	f7fe f8ce 	bl	80001e8 <__aeabi_uldivmod>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4613      	mov	r3, r2
 8002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	3301      	adds	r3, #1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002064:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800206e:	e002      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x184>)
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002078:	4618      	mov	r0, r3
 800207a:	3740      	adds	r7, #64	@ 0x40
 800207c:	46bd      	mov	sp, r7
 800207e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	00f42400 	.word	0x00f42400
 800208c:	017d7840 	.word	0x017d7840

08002090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff0 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0a9b      	lsrs	r3, r3, #10
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	@ (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	08003ebc 	.word	0x08003ebc

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d4:	f7ff ffdc 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0b5b      	lsrs	r3, r3, #13
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	@ (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08003ebc 	.word	0x08003ebc

080020f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e041      	b.n	800218e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fee8 	bl	8000ef4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3304      	adds	r3, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f000 f9ac 	bl	8002494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01b      	beq.n	80021fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f06f 0202 	mvn.w	r2, #2
 80021ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f939 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 80021e6:	e005      	b.n	80021f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f92b 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f93c 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01b      	beq.n	8002246 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0204 	mvn.w	r2, #4
 8002216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f913 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 8002232:	e005      	b.n	8002240 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f905 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f916 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01b      	beq.n	8002292 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f06f 0208 	mvn.w	r2, #8
 8002262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2204      	movs	r2, #4
 8002268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f8ed 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 800227e:	e005      	b.n	800228c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f8df 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8f0 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01b      	beq.n	80022de <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f06f 0210 	mvn.w	r2, #16
 80022ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2208      	movs	r2, #8
 80022b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8c7 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 80022ca:	e005      	b.n	80022d8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f8b9 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f8ca 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00c      	beq.n	8002302 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0201 	mvn.w	r2, #1
 80022fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f897 	bl	8002430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800231e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fb47 	bl	80029b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00c      	beq.n	800234a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f89b 	bl	8002480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f06f 0220 	mvn.w	r2, #32
 8002366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fb19 	bl	80029a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002392:	2302      	movs	r3, #2
 8002394:	e048      	b.n	8002428 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0c      	cmp	r3, #12
 80023a2:	d839      	bhi.n	8002418 <HAL_TIM_OC_ConfigChannel+0xa0>
 80023a4:	a201      	add	r2, pc, #4	@ (adr r2, 80023ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80023a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	080023e1 	.word	0x080023e1
 80023b0:	08002419 	.word	0x08002419
 80023b4:	08002419 	.word	0x08002419
 80023b8:	08002419 	.word	0x08002419
 80023bc:	080023ef 	.word	0x080023ef
 80023c0:	08002419 	.word	0x08002419
 80023c4:	08002419 	.word	0x08002419
 80023c8:	08002419 	.word	0x08002419
 80023cc:	080023fd 	.word	0x080023fd
 80023d0:	08002419 	.word	0x08002419
 80023d4:	08002419 	.word	0x08002419
 80023d8:	08002419 	.word	0x08002419
 80023dc:	0800240b 	.word	0x0800240b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f8e0 	bl	80025ac <TIM_OC1_SetConfig>
      break;
 80023ec:	e017      	b.n	800241e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f93f 	bl	8002678 <TIM_OC2_SetConfig>
      break;
 80023fa:	e010      	b.n	800241e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f9a4 	bl	8002750 <TIM_OC3_SetConfig>
      break;
 8002408:	e009      	b.n	800241e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fa07 	bl	8002824 <TIM_OC4_SetConfig>
      break;
 8002416:	e002      	b.n	800241e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	75fb      	strb	r3, [r7, #23]
      break;
 800241c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002426:	7dfb      	ldrb	r3, [r7, #23]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002590 <TIM_Base_SetConfig+0xfc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00f      	beq.n	80024cc <TIM_Base_SetConfig+0x38>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b2:	d00b      	beq.n	80024cc <TIM_Base_SetConfig+0x38>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a37      	ldr	r2, [pc, #220]	@ (8002594 <TIM_Base_SetConfig+0x100>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d007      	beq.n	80024cc <TIM_Base_SetConfig+0x38>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a36      	ldr	r2, [pc, #216]	@ (8002598 <TIM_Base_SetConfig+0x104>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d003      	beq.n	80024cc <TIM_Base_SetConfig+0x38>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a35      	ldr	r2, [pc, #212]	@ (800259c <TIM_Base_SetConfig+0x108>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d108      	bne.n	80024de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002590 <TIM_Base_SetConfig+0xfc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01b      	beq.n	800251e <TIM_Base_SetConfig+0x8a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ec:	d017      	beq.n	800251e <TIM_Base_SetConfig+0x8a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a28      	ldr	r2, [pc, #160]	@ (8002594 <TIM_Base_SetConfig+0x100>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <TIM_Base_SetConfig+0x8a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a27      	ldr	r2, [pc, #156]	@ (8002598 <TIM_Base_SetConfig+0x104>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00f      	beq.n	800251e <TIM_Base_SetConfig+0x8a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a26      	ldr	r2, [pc, #152]	@ (800259c <TIM_Base_SetConfig+0x108>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00b      	beq.n	800251e <TIM_Base_SetConfig+0x8a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a25      	ldr	r2, [pc, #148]	@ (80025a0 <TIM_Base_SetConfig+0x10c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0x8a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a24      	ldr	r2, [pc, #144]	@ (80025a4 <TIM_Base_SetConfig+0x110>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0x8a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a23      	ldr	r2, [pc, #140]	@ (80025a8 <TIM_Base_SetConfig+0x114>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d108      	bne.n	8002530 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <TIM_Base_SetConfig+0xfc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d103      	bne.n	8002564 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f023 0201 	bic.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]
  }
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40010000 	.word	0x40010000
 8002594:	40000400 	.word	0x40000400
 8002598:	40000800 	.word	0x40000800
 800259c:	40000c00 	.word	0x40000c00
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40014400 	.word	0x40014400
 80025a8:	40014800 	.word	0x40014800

080025ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f023 0201 	bic.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f023 0302 	bic.w	r3, r3, #2
 80025f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <TIM_OC1_SetConfig+0xc8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10c      	bne.n	8002622 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0308 	bic.w	r3, r3, #8
 800260e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <TIM_OC1_SetConfig+0xc8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	621a      	str	r2, [r3, #32]
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40010000 	.word	0x40010000

08002678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f023 0210 	bic.w	r2, r3, #16
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0320 	bic.w	r3, r3, #32
 80026c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <TIM_OC2_SetConfig+0xd4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10d      	bne.n	80026f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a15      	ldr	r2, [pc, #84]	@ (800274c <TIM_OC2_SetConfig+0xd4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d113      	bne.n	8002724 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800270a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40010000 	.word	0x40010000

08002750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800277e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <TIM_OC3_SetConfig+0xd0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10d      	bne.n	80027ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a14      	ldr	r2, [pc, #80]	@ (8002820 <TIM_OC3_SetConfig+0xd0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d113      	bne.n	80027fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	621a      	str	r2, [r3, #32]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40010000 	.word	0x40010000

08002824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800286e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	031b      	lsls	r3, r3, #12
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a10      	ldr	r2, [pc, #64]	@ (80028c0 <TIM_OC4_SetConfig+0x9c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d109      	bne.n	8002898 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800288a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000

080028c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028d8:	2302      	movs	r3, #2
 80028da:	e050      	b.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1c      	ldr	r2, [pc, #112]	@ (800298c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d018      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002928:	d013      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a15      	ldr	r2, [pc, #84]	@ (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a13      	ldr	r2, [pc, #76]	@ (800299c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10c      	bne.n	800296c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40010000 	.word	0x40010000
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40014000 	.word	0x40014000

080029a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e042      	b.n	8002a60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe faa6 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	@ 0x24
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fde9 	bl	80035e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	@ 0x28
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d175      	bne.n	8002b74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_UART_Transmit+0x2c>
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e06e      	b.n	8002b76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2221      	movs	r2, #33	@ 0x21
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe fb81 	bl	80011ac <HAL_GetTick>
 8002aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	88fa      	ldrh	r2, [r7, #6]
 8002ab6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac0:	d108      	bne.n	8002ad4 <HAL_UART_Transmit+0x6c>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d104      	bne.n	8002ad4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e003      	b.n	8002adc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002adc:	e02e      	b.n	8002b3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2180      	movs	r1, #128	@ 0x80
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb4b 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e03a      	b.n	8002b76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	3302      	adds	r3, #2
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	e007      	b.n	8002b2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1cb      	bne.n	8002ade <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2140      	movs	r1, #64	@ 0x40
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fb17 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e006      	b.n	8002b76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d121      	bne.n	8002bdc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_UART_Transmit_IT+0x26>
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e01a      	b.n	8002bde <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	88fa      	ldrh	r2, [r7, #6]
 8002bb2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	88fa      	ldrh	r2, [r7, #6]
 8002bb8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	@ 0x21
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bd6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d112      	bne.n	8002c2a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_UART_Receive_IT+0x26>
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e00b      	b.n	8002c2c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fb08 	bl	8003236 <UART_Start_Receive_IT>
 8002c26:	4603      	mov	r3, r0
 8002c28:	e000      	b.n	8002c2c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0ba      	sub	sp, #232	@ 0xe8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_UART_IRQHandler+0x66>
 8002c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fbe8 	bl	8003468 <UART_Receive_IT>
      return;
 8002c98:	e25b      	b.n	8003152 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80de 	beq.w	8002e60 <HAL_UART_IRQHandler+0x22c>
 8002ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d106      	bne.n	8002cbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80d1 	beq.w	8002e60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_UART_IRQHandler+0xae>
 8002cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_UART_IRQHandler+0xd2>
 8002cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfe:	f043 0202 	orr.w	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_UART_IRQHandler+0xf6>
 8002d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d011      	beq.n	8002d5a <HAL_UART_IRQHandler+0x126>
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f043 0208 	orr.w	r2, r3, #8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 81f2 	beq.w	8003148 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_UART_IRQHandler+0x14e>
 8002d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fb73 	bl	8003468 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8c:	2b40      	cmp	r3, #64	@ 0x40
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <HAL_UART_IRQHandler+0x17a>
 8002da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d04f      	beq.n	8002e4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa7b 	bl	80032aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b40      	cmp	r3, #64	@ 0x40
 8002dc0:	d141      	bne.n	8002e46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3314      	adds	r3, #20
 8002dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3314      	adds	r3, #20
 8002dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002dee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1d9      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d013      	beq.n	8002e3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003014 <HAL_UART_IRQHandler+0x3e0>)
 8002e1c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fb4f 	bl	80014c6 <HAL_DMA_Abort_IT>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	e00e      	b.n	8002e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f98a 	bl	8003158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	e00a      	b.n	8002e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f986 	bl	8003158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4c:	e006      	b.n	8002e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f982 	bl	8003158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e5a:	e175      	b.n	8003148 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5c:	bf00      	nop
    return;
 8002e5e:	e173      	b.n	8003148 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 814f 	bne.w	8003108 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8148 	beq.w	8003108 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8141 	beq.w	8003108 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea6:	2b40      	cmp	r3, #64	@ 0x40
 8002ea8:	f040 80b6 	bne.w	8003018 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8145 	beq.w	800314c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	f080 813e 	bcs.w	800314c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ed6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee2:	f000 8088 	beq.w	8002ff6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1d9      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3314      	adds	r3, #20
 8002f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f62:	e841 2300 	strex	r3, r2, [r1]
 8002f66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e1      	bne.n	8002f32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3314      	adds	r3, #20
 8002f74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e3      	bne.n	8002f6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fc6:	f023 0310 	bic.w	r3, r3, #16
 8002fca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002fd8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fda:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e3      	bne.n	8002fb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe f9f8 	bl	80013e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003004:	b29b      	uxth	r3, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	b29b      	uxth	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f8ad 	bl	800316c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003012:	e09b      	b.n	800314c <HAL_UART_IRQHandler+0x518>
 8003014:	08003371 	.word	0x08003371
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003020:	b29b      	uxth	r3, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 808e 	beq.w	8003150 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8089 	beq.w	8003150 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800304e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003054:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003062:	647a      	str	r2, [r7, #68]	@ 0x44
 8003064:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e3      	bne.n	800303e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3314      	adds	r3, #20
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	623b      	str	r3, [r7, #32]
   return(result);
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3314      	adds	r3, #20
 8003096:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800309a:	633a      	str	r2, [r7, #48]	@ 0x30
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e3      	bne.n	8003076 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0310 	bic.w	r3, r3, #16
 80030d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80030e0:	61fa      	str	r2, [r7, #28]
 80030e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	69b9      	ldr	r1, [r7, #24]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	e841 2300 	strex	r3, r2, [r1]
 80030ec:	617b      	str	r3, [r7, #20]
   return(result);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e3      	bne.n	80030bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030fe:	4619      	mov	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f833 	bl	800316c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003106:	e023      	b.n	8003150 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003110:	2b00      	cmp	r3, #0
 8003112:	d009      	beq.n	8003128 <HAL_UART_IRQHandler+0x4f4>
 8003114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f939 	bl	8003398 <UART_Transmit_IT>
    return;
 8003126:	e014      	b.n	8003152 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <HAL_UART_IRQHandler+0x51e>
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f979 	bl	8003438 <UART_EndTransmit_IT>
    return;
 8003146:	e004      	b.n	8003152 <HAL_UART_IRQHandler+0x51e>
    return;
 8003148:	bf00      	nop
 800314a:	e002      	b.n	8003152 <HAL_UART_IRQHandler+0x51e>
      return;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <HAL_UART_IRQHandler+0x51e>
      return;
 8003150:	bf00      	nop
  }
}
 8003152:	37e8      	adds	r7, #232	@ 0xe8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003194:	e03b      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d037      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe f805 	bl	80011ac <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e03a      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d023      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b80      	cmp	r3, #128	@ 0x80
 80031ca:	d020      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b40      	cmp	r3, #64	@ 0x40
 80031d0:	d01d      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d116      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f857 	bl	80032aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2208      	movs	r2, #8
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e00f      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	429a      	cmp	r2, r3
 800322a:	d0b4      	beq.n	8003196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	4613      	mov	r3, r2
 8003242:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2222      	movs	r2, #34	@ 0x22
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b095      	sub	sp, #84	@ 0x54
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	330c      	adds	r3, #12
 80032d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80032d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e5      	bne.n	80032b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3314      	adds	r3, #20
 80032ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3314      	adds	r3, #20
 8003304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800330c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e5      	bne.n	80032e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	2b01      	cmp	r3, #1
 8003320:	d119      	bne.n	8003356 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	60bb      	str	r3, [r7, #8]
   return(result);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f023 0310 	bic.w	r3, r3, #16
 8003338:	647b      	str	r3, [r7, #68]	@ 0x44
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003342:	61ba      	str	r2, [r7, #24]
 8003344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	6979      	ldr	r1, [r7, #20]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	613b      	str	r3, [r7, #16]
   return(result);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e5      	bne.n	8003322 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003364:	bf00      	nop
 8003366:	3754      	adds	r7, #84	@ 0x54
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7ff fee4 	bl	8003158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b21      	cmp	r3, #33	@ 0x21
 80033aa:	d13e      	bne.n	800342a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b4:	d114      	bne.n	80033e0 <UART_Transmit_IT+0x48>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d110      	bne.n	80033e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	1c9a      	adds	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	621a      	str	r2, [r3, #32]
 80033de:	e008      	b.n	80033f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	1c59      	adds	r1, r3, #1
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6211      	str	r1, [r2, #32]
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4619      	mov	r1, r3
 8003400:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003414:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003424:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800344e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fd f9c1 	bl	80007e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	@ 0x30
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b22      	cmp	r3, #34	@ 0x22
 800347a:	f040 80ae 	bne.w	80035da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003486:	d117      	bne.n	80034b8 <UART_Receive_IT+0x50>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d113      	bne.n	80034b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80034b6:	e026      	b.n	8003506 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ca:	d007      	beq.n	80034dc <UART_Receive_IT+0x74>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <UART_Receive_IT+0x82>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e008      	b.n	80034fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29b      	uxth	r3, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4619      	mov	r1, r3
 8003514:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003516:	2b00      	cmp	r3, #0
 8003518:	d15d      	bne.n	80035d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0220 	bic.w	r2, r2, #32
 8003528:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003538:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	2b01      	cmp	r3, #1
 800355e:	d135      	bne.n	80035cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	613b      	str	r3, [r7, #16]
   return(result);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f023 0310 	bic.w	r3, r3, #16
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003586:	623a      	str	r2, [r7, #32]
 8003588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	61bb      	str	r3, [r7, #24]
   return(result);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e5      	bne.n	8003566 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d10a      	bne.n	80035be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fdd1 	bl	800316c <HAL_UARTEx_RxEventCallback>
 80035ca:	e002      	b.n	80035d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fd fa23 	bl	8000a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e002      	b.n	80035dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3730      	adds	r7, #48	@ 0x30
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e8:	b0c0      	sub	sp, #256	@ 0x100
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003600:	68d9      	ldr	r1, [r3, #12]
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	ea40 0301 	orr.w	r3, r0, r1
 800360c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	431a      	orrs	r2, r3
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800363c:	f021 010c 	bic.w	r1, r1, #12
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800364a:	430b      	orrs	r3, r1
 800364c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800365a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365e:	6999      	ldr	r1, [r3, #24]
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	ea40 0301 	orr.w	r3, r0, r1
 800366a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b8f      	ldr	r3, [pc, #572]	@ (80038b0 <UART_SetConfig+0x2cc>)
 8003674:	429a      	cmp	r2, r3
 8003676:	d005      	beq.n	8003684 <UART_SetConfig+0xa0>
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4b8d      	ldr	r3, [pc, #564]	@ (80038b4 <UART_SetConfig+0x2d0>)
 8003680:	429a      	cmp	r2, r3
 8003682:	d104      	bne.n	800368e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003684:	f7fe fd24 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8003688:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800368c:	e003      	b.n	8003696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800368e:	f7fe fd0b 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8003692:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a0:	f040 810c 	bne.w	80038bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036b6:	4622      	mov	r2, r4
 80036b8:	462b      	mov	r3, r5
 80036ba:	1891      	adds	r1, r2, r2
 80036bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036be:	415b      	adcs	r3, r3
 80036c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036c6:	4621      	mov	r1, r4
 80036c8:	eb12 0801 	adds.w	r8, r2, r1
 80036cc:	4629      	mov	r1, r5
 80036ce:	eb43 0901 	adc.w	r9, r3, r1
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e6:	4690      	mov	r8, r2
 80036e8:	4699      	mov	r9, r3
 80036ea:	4623      	mov	r3, r4
 80036ec:	eb18 0303 	adds.w	r3, r8, r3
 80036f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036f4:	462b      	mov	r3, r5
 80036f6:	eb49 0303 	adc.w	r3, r9, r3
 80036fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800370a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800370e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003712:	460b      	mov	r3, r1
 8003714:	18db      	adds	r3, r3, r3
 8003716:	653b      	str	r3, [r7, #80]	@ 0x50
 8003718:	4613      	mov	r3, r2
 800371a:	eb42 0303 	adc.w	r3, r2, r3
 800371e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003728:	f7fc fd5e 	bl	80001e8 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4b61      	ldr	r3, [pc, #388]	@ (80038b8 <UART_SetConfig+0x2d4>)
 8003732:	fba3 2302 	umull	r2, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	011c      	lsls	r4, r3, #4
 800373a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373e:	2200      	movs	r2, #0
 8003740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800374c:	4642      	mov	r2, r8
 800374e:	464b      	mov	r3, r9
 8003750:	1891      	adds	r1, r2, r2
 8003752:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003754:	415b      	adcs	r3, r3
 8003756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800375c:	4641      	mov	r1, r8
 800375e:	eb12 0a01 	adds.w	sl, r2, r1
 8003762:	4649      	mov	r1, r9
 8003764:	eb43 0b01 	adc.w	fp, r3, r1
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800377c:	4692      	mov	sl, r2
 800377e:	469b      	mov	fp, r3
 8003780:	4643      	mov	r3, r8
 8003782:	eb1a 0303 	adds.w	r3, sl, r3
 8003786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800378a:	464b      	mov	r3, r9
 800378c:	eb4b 0303 	adc.w	r3, fp, r3
 8003790:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037a8:	460b      	mov	r3, r1
 80037aa:	18db      	adds	r3, r3, r3
 80037ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ae:	4613      	mov	r3, r2
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037be:	f7fc fd13 	bl	80001e8 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	4b3b      	ldr	r3, [pc, #236]	@ (80038b8 <UART_SetConfig+0x2d4>)
 80037ca:	fba3 2301 	umull	r2, r3, r3, r1
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2264      	movs	r2, #100	@ 0x64
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	1acb      	subs	r3, r1, r3
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037de:	4b36      	ldr	r3, [pc, #216]	@ (80038b8 <UART_SetConfig+0x2d4>)
 80037e0:	fba3 2302 	umull	r2, r3, r3, r2
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037ec:	441c      	add	r4, r3
 80037ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003800:	4642      	mov	r2, r8
 8003802:	464b      	mov	r3, r9
 8003804:	1891      	adds	r1, r2, r2
 8003806:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003808:	415b      	adcs	r3, r3
 800380a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800380c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003810:	4641      	mov	r1, r8
 8003812:	1851      	adds	r1, r2, r1
 8003814:	6339      	str	r1, [r7, #48]	@ 0x30
 8003816:	4649      	mov	r1, r9
 8003818:	414b      	adcs	r3, r1
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003828:	4659      	mov	r1, fp
 800382a:	00cb      	lsls	r3, r1, #3
 800382c:	4651      	mov	r1, sl
 800382e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003832:	4651      	mov	r1, sl
 8003834:	00ca      	lsls	r2, r1, #3
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	4603      	mov	r3, r0
 800383c:	4642      	mov	r2, r8
 800383e:	189b      	adds	r3, r3, r2
 8003840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003844:	464b      	mov	r3, r9
 8003846:	460a      	mov	r2, r1
 8003848:	eb42 0303 	adc.w	r3, r2, r3
 800384c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800385c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003864:	460b      	mov	r3, r1
 8003866:	18db      	adds	r3, r3, r3
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800386a:	4613      	mov	r3, r2
 800386c:	eb42 0303 	adc.w	r3, r2, r3
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800387a:	f7fc fcb5 	bl	80001e8 <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <UART_SetConfig+0x2d4>)
 8003884:	fba3 1302 	umull	r1, r3, r3, r2
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	2164      	movs	r1, #100	@ 0x64
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	3332      	adds	r3, #50	@ 0x32
 8003896:	4a08      	ldr	r2, [pc, #32]	@ (80038b8 <UART_SetConfig+0x2d4>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	f003 0207 	and.w	r2, r3, #7
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4422      	add	r2, r4
 80038aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038ac:	e106      	b.n	8003abc <UART_SetConfig+0x4d8>
 80038ae:	bf00      	nop
 80038b0:	40011000 	.word	0x40011000
 80038b4:	40011400 	.word	0x40011400
 80038b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038ce:	4642      	mov	r2, r8
 80038d0:	464b      	mov	r3, r9
 80038d2:	1891      	adds	r1, r2, r2
 80038d4:	6239      	str	r1, [r7, #32]
 80038d6:	415b      	adcs	r3, r3
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038de:	4641      	mov	r1, r8
 80038e0:	1854      	adds	r4, r2, r1
 80038e2:	4649      	mov	r1, r9
 80038e4:	eb43 0501 	adc.w	r5, r3, r1
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	00eb      	lsls	r3, r5, #3
 80038f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f6:	00e2      	lsls	r2, r4, #3
 80038f8:	4614      	mov	r4, r2
 80038fa:	461d      	mov	r5, r3
 80038fc:	4643      	mov	r3, r8
 80038fe:	18e3      	adds	r3, r4, r3
 8003900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003904:	464b      	mov	r3, r9
 8003906:	eb45 0303 	adc.w	r3, r5, r3
 800390a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800391a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800392a:	4629      	mov	r1, r5
 800392c:	008b      	lsls	r3, r1, #2
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003934:	4621      	mov	r1, r4
 8003936:	008a      	lsls	r2, r1, #2
 8003938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800393c:	f7fc fc54 	bl	80001e8 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4b60      	ldr	r3, [pc, #384]	@ (8003ac8 <UART_SetConfig+0x4e4>)
 8003946:	fba3 2302 	umull	r2, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	011c      	lsls	r4, r3, #4
 800394e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800395c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003960:	4642      	mov	r2, r8
 8003962:	464b      	mov	r3, r9
 8003964:	1891      	adds	r1, r2, r2
 8003966:	61b9      	str	r1, [r7, #24]
 8003968:	415b      	adcs	r3, r3
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003970:	4641      	mov	r1, r8
 8003972:	1851      	adds	r1, r2, r1
 8003974:	6139      	str	r1, [r7, #16]
 8003976:	4649      	mov	r1, r9
 8003978:	414b      	adcs	r3, r1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003988:	4659      	mov	r1, fp
 800398a:	00cb      	lsls	r3, r1, #3
 800398c:	4651      	mov	r1, sl
 800398e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003992:	4651      	mov	r1, sl
 8003994:	00ca      	lsls	r2, r1, #3
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	4603      	mov	r3, r0
 800399c:	4642      	mov	r2, r8
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039a4:	464b      	mov	r3, r9
 80039a6:	460a      	mov	r2, r1
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039c8:	4649      	mov	r1, r9
 80039ca:	008b      	lsls	r3, r1, #2
 80039cc:	4641      	mov	r1, r8
 80039ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039d2:	4641      	mov	r1, r8
 80039d4:	008a      	lsls	r2, r1, #2
 80039d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039da:	f7fc fc05 	bl	80001e8 <__aeabi_uldivmod>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	4b38      	ldr	r3, [pc, #224]	@ (8003ac8 <UART_SetConfig+0x4e4>)
 80039e6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2264      	movs	r2, #100	@ 0x64
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	1acb      	subs	r3, r1, r3
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	3332      	adds	r3, #50	@ 0x32
 80039f8:	4a33      	ldr	r2, [pc, #204]	@ (8003ac8 <UART_SetConfig+0x4e4>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a04:	441c      	add	r4, r3
 8003a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	1891      	adds	r1, r2, r2
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	415b      	adcs	r3, r3
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a24:	4641      	mov	r1, r8
 8003a26:	1851      	adds	r1, r2, r1
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	414b      	adcs	r3, r1
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a3c:	4659      	mov	r1, fp
 8003a3e:	00cb      	lsls	r3, r1, #3
 8003a40:	4651      	mov	r1, sl
 8003a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a46:	4651      	mov	r1, sl
 8003a48:	00ca      	lsls	r2, r1, #3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4642      	mov	r2, r8
 8003a52:	189b      	adds	r3, r3, r2
 8003a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a56:	464b      	mov	r3, r9
 8003a58:	460a      	mov	r2, r1
 8003a5a:	eb42 0303 	adc.w	r3, r2, r3
 8003a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a78:	4649      	mov	r1, r9
 8003a7a:	008b      	lsls	r3, r1, #2
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a82:	4641      	mov	r1, r8
 8003a84:	008a      	lsls	r2, r1, #2
 8003a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a8a:	f7fc fbad 	bl	80001e8 <__aeabi_uldivmod>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <UART_SetConfig+0x4e4>)
 8003a94:	fba3 1302 	umull	r1, r3, r3, r2
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	2164      	movs	r1, #100	@ 0x64
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	3332      	adds	r3, #50	@ 0x32
 8003aa6:	4a08      	ldr	r2, [pc, #32]	@ (8003ac8 <UART_SetConfig+0x4e4>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	f003 020f 	and.w	r2, r3, #15
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4422      	add	r2, r4
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	bf00      	nop
 8003abe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac8:	51eb851f 	.word	0x51eb851f

08003acc <atoi>:
 8003acc:	220a      	movs	r2, #10
 8003ace:	2100      	movs	r1, #0
 8003ad0:	f000 b87a 	b.w	8003bc8 <strtol>

08003ad4 <_strtol_l.constprop.0>:
 8003ad4:	2b24      	cmp	r3, #36	@ 0x24
 8003ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ada:	4686      	mov	lr, r0
 8003adc:	4690      	mov	r8, r2
 8003ade:	d801      	bhi.n	8003ae4 <_strtol_l.constprop.0+0x10>
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d106      	bne.n	8003af2 <_strtol_l.constprop.0+0x1e>
 8003ae4:	f000 f892 	bl	8003c0c <__errno>
 8003ae8:	2316      	movs	r3, #22
 8003aea:	6003      	str	r3, [r0, #0]
 8003aec:	2000      	movs	r0, #0
 8003aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af2:	4834      	ldr	r0, [pc, #208]	@ (8003bc4 <_strtol_l.constprop.0+0xf0>)
 8003af4:	460d      	mov	r5, r1
 8003af6:	462a      	mov	r2, r5
 8003af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003afc:	5d06      	ldrb	r6, [r0, r4]
 8003afe:	f016 0608 	ands.w	r6, r6, #8
 8003b02:	d1f8      	bne.n	8003af6 <_strtol_l.constprop.0+0x22>
 8003b04:	2c2d      	cmp	r4, #45	@ 0x2d
 8003b06:	d12d      	bne.n	8003b64 <_strtol_l.constprop.0+0x90>
 8003b08:	782c      	ldrb	r4, [r5, #0]
 8003b0a:	2601      	movs	r6, #1
 8003b0c:	1c95      	adds	r5, r2, #2
 8003b0e:	f033 0210 	bics.w	r2, r3, #16
 8003b12:	d109      	bne.n	8003b28 <_strtol_l.constprop.0+0x54>
 8003b14:	2c30      	cmp	r4, #48	@ 0x30
 8003b16:	d12a      	bne.n	8003b6e <_strtol_l.constprop.0+0x9a>
 8003b18:	782a      	ldrb	r2, [r5, #0]
 8003b1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003b1e:	2a58      	cmp	r2, #88	@ 0x58
 8003b20:	d125      	bne.n	8003b6e <_strtol_l.constprop.0+0x9a>
 8003b22:	786c      	ldrb	r4, [r5, #1]
 8003b24:	2310      	movs	r3, #16
 8003b26:	3502      	adds	r5, #2
 8003b28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003b2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003b30:	2200      	movs	r2, #0
 8003b32:	fbbc f9f3 	udiv	r9, ip, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	fb03 ca19 	mls	sl, r3, r9, ip
 8003b3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003b40:	2f09      	cmp	r7, #9
 8003b42:	d81b      	bhi.n	8003b7c <_strtol_l.constprop.0+0xa8>
 8003b44:	463c      	mov	r4, r7
 8003b46:	42a3      	cmp	r3, r4
 8003b48:	dd27      	ble.n	8003b9a <_strtol_l.constprop.0+0xc6>
 8003b4a:	1c57      	adds	r7, r2, #1
 8003b4c:	d007      	beq.n	8003b5e <_strtol_l.constprop.0+0x8a>
 8003b4e:	4581      	cmp	r9, r0
 8003b50:	d320      	bcc.n	8003b94 <_strtol_l.constprop.0+0xc0>
 8003b52:	d101      	bne.n	8003b58 <_strtol_l.constprop.0+0x84>
 8003b54:	45a2      	cmp	sl, r4
 8003b56:	db1d      	blt.n	8003b94 <_strtol_l.constprop.0+0xc0>
 8003b58:	fb00 4003 	mla	r0, r0, r3, r4
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b62:	e7eb      	b.n	8003b3c <_strtol_l.constprop.0+0x68>
 8003b64:	2c2b      	cmp	r4, #43	@ 0x2b
 8003b66:	bf04      	itt	eq
 8003b68:	782c      	ldrbeq	r4, [r5, #0]
 8003b6a:	1c95      	addeq	r5, r2, #2
 8003b6c:	e7cf      	b.n	8003b0e <_strtol_l.constprop.0+0x3a>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1da      	bne.n	8003b28 <_strtol_l.constprop.0+0x54>
 8003b72:	2c30      	cmp	r4, #48	@ 0x30
 8003b74:	bf0c      	ite	eq
 8003b76:	2308      	moveq	r3, #8
 8003b78:	230a      	movne	r3, #10
 8003b7a:	e7d5      	b.n	8003b28 <_strtol_l.constprop.0+0x54>
 8003b7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003b80:	2f19      	cmp	r7, #25
 8003b82:	d801      	bhi.n	8003b88 <_strtol_l.constprop.0+0xb4>
 8003b84:	3c37      	subs	r4, #55	@ 0x37
 8003b86:	e7de      	b.n	8003b46 <_strtol_l.constprop.0+0x72>
 8003b88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003b8c:	2f19      	cmp	r7, #25
 8003b8e:	d804      	bhi.n	8003b9a <_strtol_l.constprop.0+0xc6>
 8003b90:	3c57      	subs	r4, #87	@ 0x57
 8003b92:	e7d8      	b.n	8003b46 <_strtol_l.constprop.0+0x72>
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	e7e1      	b.n	8003b5e <_strtol_l.constprop.0+0x8a>
 8003b9a:	1c53      	adds	r3, r2, #1
 8003b9c:	d108      	bne.n	8003bb0 <_strtol_l.constprop.0+0xdc>
 8003b9e:	2322      	movs	r3, #34	@ 0x22
 8003ba0:	f8ce 3000 	str.w	r3, [lr]
 8003ba4:	4660      	mov	r0, ip
 8003ba6:	f1b8 0f00 	cmp.w	r8, #0
 8003baa:	d0a0      	beq.n	8003aee <_strtol_l.constprop.0+0x1a>
 8003bac:	1e69      	subs	r1, r5, #1
 8003bae:	e006      	b.n	8003bbe <_strtol_l.constprop.0+0xea>
 8003bb0:	b106      	cbz	r6, 8003bb4 <_strtol_l.constprop.0+0xe0>
 8003bb2:	4240      	negs	r0, r0
 8003bb4:	f1b8 0f00 	cmp.w	r8, #0
 8003bb8:	d099      	beq.n	8003aee <_strtol_l.constprop.0+0x1a>
 8003bba:	2a00      	cmp	r2, #0
 8003bbc:	d1f6      	bne.n	8003bac <_strtol_l.constprop.0+0xd8>
 8003bbe:	f8c8 1000 	str.w	r1, [r8]
 8003bc2:	e794      	b.n	8003aee <_strtol_l.constprop.0+0x1a>
 8003bc4:	08003ec5 	.word	0x08003ec5

08003bc8 <strtol>:
 8003bc8:	4613      	mov	r3, r2
 8003bca:	460a      	mov	r2, r1
 8003bcc:	4601      	mov	r1, r0
 8003bce:	4802      	ldr	r0, [pc, #8]	@ (8003bd8 <strtol+0x10>)
 8003bd0:	6800      	ldr	r0, [r0, #0]
 8003bd2:	f7ff bf7f 	b.w	8003ad4 <_strtol_l.constprop.0>
 8003bd6:	bf00      	nop
 8003bd8:	2000000c 	.word	0x2000000c

08003bdc <memcmp>:
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	3901      	subs	r1, #1
 8003be0:	4402      	add	r2, r0
 8003be2:	4290      	cmp	r0, r2
 8003be4:	d101      	bne.n	8003bea <memcmp+0xe>
 8003be6:	2000      	movs	r0, #0
 8003be8:	e005      	b.n	8003bf6 <memcmp+0x1a>
 8003bea:	7803      	ldrb	r3, [r0, #0]
 8003bec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	d001      	beq.n	8003bf8 <memcmp+0x1c>
 8003bf4:	1b18      	subs	r0, r3, r4
 8003bf6:	bd10      	pop	{r4, pc}
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	e7f2      	b.n	8003be2 <memcmp+0x6>

08003bfc <memset>:
 8003bfc:	4402      	add	r2, r0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d100      	bne.n	8003c06 <memset+0xa>
 8003c04:	4770      	bx	lr
 8003c06:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0a:	e7f9      	b.n	8003c00 <memset+0x4>

08003c0c <__errno>:
 8003c0c:	4b01      	ldr	r3, [pc, #4]	@ (8003c14 <__errno+0x8>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	2000000c 	.word	0x2000000c

08003c18 <__libc_init_array>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c50 <__libc_init_array+0x38>)
 8003c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8003c54 <__libc_init_array+0x3c>)
 8003c1e:	1b64      	subs	r4, r4, r5
 8003c20:	10a4      	asrs	r4, r4, #2
 8003c22:	2600      	movs	r6, #0
 8003c24:	42a6      	cmp	r6, r4
 8003c26:	d109      	bne.n	8003c3c <__libc_init_array+0x24>
 8003c28:	4d0b      	ldr	r5, [pc, #44]	@ (8003c58 <__libc_init_array+0x40>)
 8003c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c5c <__libc_init_array+0x44>)
 8003c2c:	f000 f826 	bl	8003c7c <_init>
 8003c30:	1b64      	subs	r4, r4, r5
 8003c32:	10a4      	asrs	r4, r4, #2
 8003c34:	2600      	movs	r6, #0
 8003c36:	42a6      	cmp	r6, r4
 8003c38:	d105      	bne.n	8003c46 <__libc_init_array+0x2e>
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c40:	4798      	blx	r3
 8003c42:	3601      	adds	r6, #1
 8003c44:	e7ee      	b.n	8003c24 <__libc_init_array+0xc>
 8003c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4a:	4798      	blx	r3
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	e7f2      	b.n	8003c36 <__libc_init_array+0x1e>
 8003c50:	08003fd0 	.word	0x08003fd0
 8003c54:	08003fd0 	.word	0x08003fd0
 8003c58:	08003fd0 	.word	0x08003fd0
 8003c5c:	08003fd4 	.word	0x08003fd4

08003c60 <memcpy>:
 8003c60:	440a      	add	r2, r1
 8003c62:	4291      	cmp	r1, r2
 8003c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c68:	d100      	bne.n	8003c6c <memcpy+0xc>
 8003c6a:	4770      	bx	lr
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c76:	4291      	cmp	r1, r2
 8003c78:	d1f9      	bne.n	8003c6e <memcpy+0xe>
 8003c7a:	bd10      	pop	{r4, pc}

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
